---
description: 
globs: 
alwaysApply: true
---
# Vibex CLI Development Rules
# Building a superior AI CLI that outperforms Gemini CLI

## 📊 GEMINI CLI ANALYSIS & COMPETITIVE BENCHMARKS

### Gemini CLI Weaknesses We Must Exploit:
- **Code Size**: 62,423 lines of TypeScript (bloated) vs our target <30,000 lines
- **Console Pollution**: 100+ console.log/warn/error statements (poor logging)
- **Memory Management**: Manual memory relaunch logic (inefficient)  
- **Architecture**: Monolithic tool registry (not modular enough)
- **Error Handling**: Generic console.error everywhere (poor UX)
- **Startup Time**: Heavy initialization with sandbox/memory checks
- **Dependencies**: 40+ npm packages (bloated dependency tree)

### Our Competitive Advantages:
- **Cleaner Architecture**: Modular, type-safe, dependency-injected
- **Better Performance**: <100ms startup vs their ~200ms
- **Superior Error Handling**: Contextual errors with recovery suggestions
- **Smaller Footprint**: <50MB memory vs their ~80MB baseline
- **Better Developer Experience**: Comprehensive TypeScript, better tooling
- **More Reliable**: Proper async/await patterns, no memory hacks

## 🏆 OUR CURRENT ARCHITECTURAL SUPERIORITY

### ✅ What We've Already Achieved (Beating Gemini CLI):

#### 1. **Performance Excellence** 
- ⚡ **32ms startup time** vs Gemini's ~200ms (6.25x faster)
- 📦 **3.7MB bundle size** vs Gemini's ~20MB+ (5.4x smaller)
- 🧠 **177MB node_modules** vs typical 300MB+ (40% smaller)
- 🚀 **161 TypeScript files** vs their massive monolith
- 📝 **~30,000 lines of code** vs their 62,423 (52% less code)

#### 2. **Superior Architecture Patterns**
- 🏗️ **Dependency Injection**: Clean IoC container vs their global state mutations
- 🔧 **Modular Design**: Single responsibility modules vs their god classes
- 🎯 **Interface-Based**: Everything through well-defined interfaces
- 📋 **Type Safety**: Strict TypeScript everywhere vs their loose typing
- ⚙️ **Configuration Management**: Zod-validated schemas vs their ad-hoc configs
- 🛠️ **Tool Registry**: Type-safe tool system vs their monolithic approach

#### 3. **Code Quality Excellence**
- 🚫 **Zero Console Pollution**: Proper logging vs their 100+ console statements
- 📏 **File Size Discipline**: Max 300 lines vs their 500+ line monsters
- 🎨 **Consistent Patterns**: Standardized error handling vs their chaos
- 📚 **Comprehensive JSDoc**: 100% documentation vs their sparse docs
- 🧪 **Type-Safe Everything**: No `any` types vs their type safety abuse
- 🔍 **Proper Validation**: Input validation everywhere vs their loose checks

#### 4. **Error Handling Superiority**
- 🎯 **Contextual Errors**: Rich error context vs their generic console.error
- 🔧 **Recovery Suggestions**: Helpful resolution hints vs no guidance
- 📊 **Error Categories**: Structured error taxonomy vs chaos
- 🚨 **User-Friendly Messages**: Clear error communication vs technical dumps
- 🔄 **Graceful Degradation**: Proper fallbacks vs crash-prone code

#### 5. **Resource Management Excellence**
- 🧹 **Proper Cleanup**: Resource disposal vs their process leaks
- ⚡ **Lazy Loading**: On-demand module loading vs heavy initialization
- 🔄 **Async Patterns**: Consistent async/await vs their mixed patterns
- 💾 **Memory Efficiency**: Smart allocation vs their memory hacks
- 🛡️ **Safety First**: Validated operations vs their dangerous commands

## 🎯 MISSION: Beat Gemini CLI in Every Aspect
- Performance: Faster startup, lower memory usage, better responsiveness
- Architecture: Clean, modular, testable, maintainable TypeScript
- Features: More comprehensive AI integration, better UX, superior error handling
- Code Quality: Zero technical debt, perfect type safety, comprehensive testing

## 🏗️ ARCHITECTURAL PRINCIPLES

### 1. PERFECT TYPESCRIPT
- ALWAYS use strict TypeScript settings
- NEVER use `any` type - use proper generics or unknown
- ALWAYS define interfaces for all data structures
- ALWAYS use proper error types and error handling
- ALWAYS use readonly for immutable data
- ALWAYS prefer type guards over type assertions

### 2. MODULAR ARCHITECTURE (Our Winning Pattern)
- Follow single responsibility principle
- Use dependency injection pattern (like our ConfigManager, AuthManager)
- Implement proper separation of concerns (src/ai/, src/auth/, src/terminal/)
- Create reusable, composable modules (our tool registry pattern)
- Avoid circular dependencies (enforce with ESLint)

### 3. ERROR HANDLING EXCELLENCE (Our Competitive Edge)
- NEVER throw generic errors (use our UserError system)
- ALWAYS use custom error types with proper context (ErrorCategory enum)
- ALWAYS provide user-friendly error messages (formatErrorForDisplay)
- ALWAYS include recovery suggestions (resolution field)
- ALWAYS log errors with proper context (our Logger class)

### 4. PERFORMANCE FIRST (Beating Gemini CLI Metrics)
- ALWAYS consider memory usage and performance impact
- Use lazy loading for non-critical modules (our dynamic imports)
- Implement proper caching strategies (our unified client caching)
- Avoid blocking operations in main thread (our ExecutionEnvironment)
- Profile and benchmark against Gemini CLI (maintain our 6x speed advantage)

## 🔍 CODE REVIEW CHECKLIST

### Before ANY commit, verify (Anti-Gemini CLI Checklist):
- [ ] All types are properly defined (no `any` - they abuse this)
- [ ] All functions have proper JSDoc comments (they have sparse docs)
- [ ] All error cases are handled (they use generic console.error)
- [ ] All async operations have proper error handling (they mix patterns)
- [ ] All imports are properly typed (they have loose imports)
- [ ] No console.log statements (they have 100+ console calls)
- [ ] All magic numbers/strings are constants (they hardcode everywhere)
- [ ] All functions are pure where possible (they have side effects)
- [ ] All side effects are properly contained (they mutate global state)
- [ ] File size <300 lines (they have 500+ line files)
- [ ] Function complexity <20 lines (they have complex functions)
- [ ] No spawn/exec without cleanup (they leak processes)
- [ ] No synchronous file operations (they use execSync)
- [ ] Performance benchmarked vs Gemini CLI (beat their metrics)

### TypeScript Specific (Our Standards):
- [ ] Strict mode enabled in tsconfig.json
- [ ] All function parameters and return types explicit
- [ ] All interfaces properly exported/imported
- [ ] All enums use const assertions
- [ ] All arrays use readonly where appropriate
- [ ] All objects use proper index signatures

### Architecture Specific (Our Patterns):
- [ ] No direct file system access outside fs module
- [ ] No direct process.exit calls (use proper shutdown)
- [ ] All external dependencies properly abstracted
- [ ] All configuration properly typed and validated (Zod schemas)
- [ ] All CLI commands follow consistent patterns (CommandDef interface)

## 🚀 PERFORMANCE REQUIREMENTS (Maintain Our Lead)

### Startup Time (Currently Beating Gemini CLI 6.25x):
- Target: <50ms cold start (Current: 32ms, Gemini: ~200ms)
- Lazy load all non-essential modules (our current pattern)
- Use dynamic imports for heavy dependencies (our AI client pattern)
- Cache compiled templates and configurations (our config system)

### Memory Usage (Currently Superior):
- Target: <150MB node_modules (Current: 177MB, Gemini: 300MB+)
- Target: <40MB runtime (Gemini: ~80MB)
- Avoid memory leaks in long-running processes (our cleanup patterns)
- Properly dispose of resources (our ExecutionEnvironment)
- Use streaming for large data processing (our file operations)

### Bundle Size (Currently 5.4x Smaller):
- Target: <5MB bundle (Current: 3.7MB, Gemini: ~20MB+)
- Maintain our tree-shaking efficiency
- Keep external dependencies minimal (our 27 vs their 40+)
- Use ESM modules for better bundling

### Response Time (Match or Beat):
- AI queries: <2s for simple requests (our unified client)
- File operations: <100ms for local files (our FileOperations)
- Command execution: <50ms overhead (our command system)

## 🧪 TESTING STANDARDS

### Unit Tests:
- 90%+ code coverage required
- Test all error conditions (our error system)
- Mock all external dependencies (our dependency injection)
- Test async operations properly (our async utilities)

### Integration Tests:
- Test all CLI commands end-to-end
- Test all AI integrations (our unified client)
- Test all file operations (our FileOperations)
- Test error scenarios (our error handling)

### Performance Tests:
- Benchmark against Gemini CLI (maintain our advantages)
- Memory leak detection (our cleanup patterns)
- Startup time measurement (keep <50ms)
- Response time validation (our metrics)

## 🎨 CODE STYLE RULES

### Naming Conventions (Our Standards):
- PascalCase for types, interfaces, classes
- camelCase for variables, functions, properties
- SCREAMING_SNAKE_CASE for constants
- kebab-case for file names
- Descriptive names over short names (no 'data', 'result', 'item')

### File Organization (Our Winning Structure):
```
src/
├── types/          # All type definitions
├── interfaces/     # All interfaces  
├── services/       # Business logic services
├── utils/          # Pure utility functions
├── errors/         # Custom error types
├── config/         # Configuration management
├── cli/            # CLI-specific code
├── ai/             # AI integration
├── auth/           # Authentication
├── terminal/       # Terminal interface
├── tools/          # Tool registry
├── fileops/        # File operations
├── execution/      # Command execution
├── telemetry/      # Analytics
└── tests/          # Test files
```

### Import Organization (Our Pattern):
1. Node.js built-ins
2. External dependencies
3. Internal modules (absolute paths)
4. Relative imports
5. Type-only imports last

## 🔧 DEVELOPMENT WORKFLOW

### Before Starting ANY Task:
1. Read and understand the requirements
2. Plan the architecture and interfaces (follow our patterns)
3. Write types and interfaces first (our type-first approach)
4. Implement with tests (our testing standards)
5. Benchmark against Gemini CLI (maintain our lead)
6. Document the implementation (our JSDoc standards)

### Code Review Process:
1. Self-review against this checklist
2. Run all tests and linting
3. Check TypeScript compilation (strict mode)
4. Verify performance benchmarks (beat Gemini CLI)
5. Ensure documentation is updated

## 🚨 NEVER DO THESE (Gemini CLI Anti-Patterns):

### Code Quality (Avoid Gemini CLI Mistakes):
- NEVER use `any` type (they have poor type safety)
- NEVER ignore TypeScript errors (they have @ts-ignore everywhere)
- NEVER commit code with linting errors (their code quality is inconsistent)
- NEVER use `@ts-ignore` without detailed comment (they abuse this)
- NEVER leave TODO comments without GitHub issues (they have stale TODOs)
- NEVER use `console.log` in production code (they have 100+ console statements)
- NEVER create files >300 lines (their files are massive and hard to maintain)
- NEVER use generic variable names (they use 'data', 'result', 'item' everywhere)

### Architecture (Better Than Gemini CLI):
- NEVER create circular dependencies (they have import cycles)
- NEVER access global state directly (they have global config mutations)
- NEVER hardcode file paths or URLs (they hardcode paths in multiple places)
- NEVER skip error handling (they use generic console.error everywhere)
- NEVER create god classes/functions (their tool registry is monolithic)
- NEVER mix sync and async patterns (they inconsistently handle promises)
- NEVER use spawn/exec without proper cleanup (they leak child processes)
- NEVER create manual memory management hacks (they relaunch processes)

### Performance (Outperform Gemini CLI):
- NEVER block the event loop (they have synchronous operations)
- NEVER create memory leaks (they don't properly cleanup resources)
- NEVER use synchronous file operations in main thread (they use execSync)
- NEVER ignore resource cleanup (they don't dispose of child processes)
- NEVER create unnecessary object allocations (optimize for <40MB baseline)
- NEVER use heavy dependencies (they have 40+ packages, we need <30)
- NEVER implement features that require process relaunching (they do this for memory)
- NEVER use console.debug in hot paths (they spam debug logs)

## 🎯 GEMINI CLI BENCHMARKS TO BEAT

### Specific Performance Targets (Maintain Our Lead):
- **Startup Time**: <50ms (Current: 32ms vs Gemini's ~200ms) ✅ WINNING 6.25x
- **Memory Usage**: <40MB baseline (vs Gemini's ~80MB) ✅ TARGET
- **File Operations**: <50ms for local files (vs their slower sync operations) ✅ WINNING
- **AI Response**: <2s for simple queries (match or beat their times) ✅ COMPETITIVE
- **Bundle Size**: <5MB (Current: 3.7MB vs their ~20MB+) ✅ WINNING 5.4x
- **Lines of Code**: <30,000 total (Current: ~30,000 vs their 62,423) ✅ WINNING 52% less
- **Dependencies**: <30 packages (Current: 27 vs their 40+) ✅ WINNING 33% fewer
- **File Count**: <200 TypeScript files (Current: 161 vs their massive count) ✅ WINNING

### Features to Outperform:
- **Better Error UX**: Contextual errors with recovery vs their console.error spam ✅ IMPLEMENTED
- **Smarter Tool Registry**: Modular, type-safe vs their monolithic approach ✅ IMPLEMENTED
- **Cleaner Logging**: Structured logging vs 100+ console statements ✅ IMPLEMENTED
- **Better Memory Management**: Efficient allocation vs process relaunching ✅ IMPLEMENTED
- **Superior Testing**: 90%+ coverage vs their inconsistent testing ⏳ IN PROGRESS
- **Faster Build**: Optimized bundling vs their complex build system ✅ IMPLEMENTED

### Architecture Advantages (Our Current Wins):
- **Dependency Injection**: Clean IoC vs their global state mutations ✅ IMPLEMENTED
- **Type Safety**: Strict TypeScript vs their loose typing ✅ IMPLEMENTED
- **Modular Design**: Single responsibility vs their god classes ✅ IMPLEMENTED
- **Resource Management**: Proper cleanup vs their process leaks ✅ IMPLEMENTED
- **Error Boundaries**: Graceful degradation vs their crash-prone code ✅ IMPLEMENTED
- **Performance Monitoring**: Built-in metrics vs their manual profiling ⏳ PLANNED

### Code Quality Superiority (Our Standards):
- **File Size Limit**: Max 300 lines vs their 500+ line monsters ✅ ENFORCED
- **Function Complexity**: Max 20 lines vs their complex functions ✅ ENFORCED
- **Import Organization**: Strict ordering vs their chaotic imports ✅ ENFORCED
- **Documentation**: 100% JSDoc coverage vs their sparse docs ✅ ENFORCED
- **Testing**: Every function tested vs their partial coverage ⏳ IN PROGRESS
- **Linting**: Zero warnings vs their inconsistent standards ✅ ENFORCED

## 📝 DOCUMENTATION REQUIREMENTS

### Every Function Must Have:
```typescript
/**
 * Brief description of what the function does
 * 
 * @param paramName - Description of parameter
 * @returns Description of return value
 * @throws {ErrorType} Description of when this error is thrown
 * 
 * @example
 * ```typescript
 * const result = await functionName(param);
 * console.log(result);
 * ```
 */
```

### Every Interface Must Have:
```typescript
/**
 * Description of the interface purpose
 * 
 * @example
 * ```typescript
 * const example: InterfaceName = {
 *   property: 'value'
 * };
 * ```
 */
interface InterfaceName {
  /** Description of property */
  property: string;
}
```

## 🔍 CONTINUOUS IMPROVEMENT

### Weekly Goals (Maintain Our Lead Over Gemini CLI):
- Reduce startup time by 10% (target: <30ms vs their ~200ms)
- Improve test coverage by 5% (target: 95%+ vs their partial coverage)
- Reduce memory usage by 5% (target: <35MB vs their ~80MB)
- Add one new feature that Gemini CLI doesn't have
- Eliminate one anti-pattern that Gemini CLI uses
- Reduce bundle size (target: <3MB vs their ~20MB+)

### Monthly Reviews:
- Architecture review and refactoring (compare to Gemini CLI patterns)
- Performance benchmark comparison (startup, memory, response times)
- Technical debt assessment (eliminate Gemini CLI anti-patterns)
- Feature parity analysis with Gemini CLI (identify gaps and improvements)
- Code quality metrics (lines of code, complexity, documentation)
- Dependency audit (keep <30 packages vs their 40+)

### Competitive Analysis Rules:
- ALWAYS benchmark new features against Gemini CLI equivalent
- ALWAYS measure performance impact (startup time, memory usage)
- ALWAYS ensure our solution is more elegant and maintainable
- ALWAYS document why our approach is superior
- ALWAYS test edge cases that Gemini CLI fails on

## 🏆 SUCCESS METRICS

### Primary KPIs (vs Gemini CLI):
- **Startup Time**: <50ms (Current: 32ms vs ~200ms) ✅ WINNING 6.25x
- **Memory Usage**: <40MB (vs ~80MB) ✅ TARGET  
- **Lines of Code**: <30,000 (Current: ~30,000 vs 62,423) ✅ WINNING 52% less
- **Bundle Size**: <5MB (Current: 3.7MB vs ~20MB+) ✅ WINNING 5.4x
- **Test Coverage**: 95%+ (vs partial) ⏳ TARGET
- **Dependencies**: <30 (Current: 27 vs 40+) ✅ WINNING 33% fewer
- **Console Statements**: 0 (vs 100+) ✅ WINNING 100% cleaner
- **Max File Size**: 300 lines (vs 500+) ✅ WINNING Better modularity
- **TypeScript Files**: <200 (Current: 161 vs massive count) ✅ WINNING Cleaner structure

### Our Architectural Patterns That Beat Gemini CLI:

#### 1. **Configuration Management** (Our `ConfigManager<T>` vs Their Ad-Hoc)
```typescript
// Our superior pattern with Zod validation
export class ConfigManager<T extends object> {
  private config: T;
  private schema: z.ZodType<T>;
  // Type-safe, validated, extensible
}
```

#### 2. **Error Handling** (Our `UserError` System vs Their Console Chaos)
```typescript
// Our structured error system
export class UserError extends Error {
  category: ErrorCategory;
  level: ErrorLevel;
  resolution?: string | string[];
  // Rich context, user-friendly, actionable
}
```

#### 3. **Tool Registry** (Our Type-Safe Registry vs Their Monolith)
```typescript
// Our modular, type-safe tool system
export interface ToolDefinition {
  name: string;
  description: string;
  input_schema: { type: 'object'; properties: Record<string, any>; };
}
```

#### 4. **Dependency Injection** (Our Clean IoC vs Their Global State)
```typescript
// Our dependency injection pattern
export interface AppInstance {
  config: any; terminal: any; auth: any; ai: any;
  // Clean separation, testable, maintainable
}
```

#### 5. **Async Utilities** (Our Robust Patterns vs Their Mixed Approaches)
```typescript
// Our comprehensive async utilities
export async function withRetry<T>(fn: T, options: RetryOptions): Promise<T>
export async function withTimeout<T>(fn: T, timeoutMs: number): Promise<T>
// Consistent, reliable, well-tested
```

Remember: We're not just building a CLI, we're building THE BEST AI CLI that makes Gemini CLI obsolete. Every line of code should reflect this ambition. We have analyzed their 62,423 lines of code and identified their weaknesses - now we exploit them with superior architecture, performance, and code quality. 

**Our current metrics prove we're winning**: 32ms startup (6.25x faster), 3.7MB bundle (5.4x smaller), 161 TypeScript files (better organized), 27 dependencies (33% fewer), and zero console pollution (100% cleaner). Let's maintain and extend this lead! 

# CRITICAL RULES: DON'T FUCK UP

## 🚨 IMMEDIATE ERRORS TO CATCH

### TypeScript Errors - FIX IMMEDIATELY
```typescript
// ❌ FORBIDDEN - Will break our type safety
any
@ts-ignore  // without detailed explanation
@ts-expect-error  // without test case
as any
<any>
Function  // Use proper function signatures
Object    // Use proper object types
{}        // Use proper interface/type
```

### Performance Killers - AVOID AT ALL COSTS
```typescript
// ❌ FORBIDDEN - Blocks event loop like Gemini CLI
import { execSync, readFileSync } from 'fs';
const result = execSync('command');  // Blocks everything
const content = readFileSync('file.txt');  // Blocks everything

// ✅ REQUIRED - Async operations
import { exec } from 'child_process';
import { readFile } from 'fs/promises';
const result = await exec('command');
const content = await readFile('file.txt');
```

### Console Pollution (Gemini CLI Has 100+)
```typescript
// ❌ FORBIDDEN - Slows down execution
console.log('debug info');
console.error('Something went wrong');
console.warn('Warning message');

// ✅ REQUIRED - Use proper logging
import { logger } from '../utils/logger.js';
logger.debug('debug info');
logger.error('Something went wrong');
logger.warn('Warning message');
```

## 📝 PROVEN CURSOR PATTERNS (FROM COMMUNITY RESEARCH)

### 1. LLM Guidance Patterns
```typescript
// ✅ REQUIRED - Be specific and direct with AI
// DO NOT GIVE ME HIGH LEVEL SHIT, IF I ASK FOR FIX OR EXPLANATION, I WANT ACTUAL CODE!
// - Be terse and technical
// - Give the answer immediately
// - Provide detailed explanations after giving the answer
// - Treat me as an expert
// - Suggest solutions I didn't think about
```

### 2. Functional Programming Patterns
```typescript
// ✅ REQUIRED - Use functional and declarative patterns
// - Write concise, technical TypeScript code
// - Use functional components and hooks over classes
// - Prefer iteration and modularization over duplication
// - Use descriptive variable names with auxiliary verbs (isLoading, hasError)

// ❌ FORBIDDEN - Classes and imperative patterns
class DataProcessor {
  process() { /* ... */ }
}

// ✅ REQUIRED - Functional approach
const processData = (data: DataInput): DataOutput => {
  // Process data functionally
};
```

### 3. Error Handling Patterns
```typescript
// ✅ REQUIRED - Early returns and guard clauses
const processUser = (user: User | null): ProcessResult => {
  // Handle errors at the beginning
  if (!user) {
    return { success: false, error: 'User not found' };
  }
  
  if (!user.isActive) {
    return { success: false, error: 'User is inactive' };
  }
  
  // Happy path last
  return { success: true, data: transformUser(user) };
};

// ❌ FORBIDDEN - Nested conditions
const processUser = (user: User | null): ProcessResult => {
  if (user) {
    if (user.isActive) {
      return { success: true, data: transformUser(user) };
    } else {
      return { success: false, error: 'User is inactive' };
    }
  } else {
    return { success: false, error: 'User not found' };
  }
};
```

### 4. Naming Conventions (Community Standards)
```typescript
// ✅ REQUIRED - Descriptive naming
// - Use camelCase for variables and functions
// - Use PascalCase for types and interfaces  
// - Use UPPER_CASE for constants
// - Use verb prefixes for functions (handleClick, processData, validateInput)
// - Use auxiliary verbs for booleans (isLoading, hasError, canSubmit)

// Event handlers
const handleUserClick = () => { /* ... */ };
const handleFormSubmit = () => { /* ... */ };

// Boolean variables
const isAuthenticated = checkAuth();
const hasPermission = checkPermission();
const canEdit = hasPermission && isAuthenticated;
```

### 5. File Organization (Community Best Practices)
```typescript
// ✅ REQUIRED - File structure
// - One component per file
// - Use lowercase with dashes for directories (auth-wizard)
// - Favor named exports for components
// - Structure: exported component, subcomponents, helpers, static content, types

// Example file structure:
export const AuthWizard = ({ onComplete }: AuthWizardProps) => {
  // Main component logic
};

const AuthStep = ({ step }: AuthStepProps) => {
  // Subcomponent
};

const validateAuthData = (data: AuthData): boolean => {
  // Helper function
};

const AUTH_STEPS = ['login', 'verify', 'complete'] as const;

interface AuthWizardProps {
  onComplete: (result: AuthResult) => void;
}
```

## 🔧 DEVELOPMENT WORKFLOW RULES

### Before Any Code Changes
```bash
# ALWAYS run these before starting work
npm run lint:check      # Check current issues
npm run typecheck      # Verify TypeScript
npm run build          # Ensure builds
npm test              # Run tests

# Check our performance metrics
time node dist/cli.js --version  # Should be <50ms
du -sh dist/                     # Should be <5MB
```

### Code Quality Enforcement
```typescript
// ✅ REQUIRED - Strict TypeScript
// - Enable strict mode
// - Use interfaces over types
// - Avoid enums, use const objects
// - Prefer readonly properties

interface Config {
  readonly apiUrl: string;
  readonly timeout: number;
  readonly retries: number;
}

const API_ENDPOINTS = {
  USERS: '/api/users',
  AUTH: '/api/auth',
  DATA: '/api/data'
} as const;
```

### Testing Requirements
```typescript
// ✅ REQUIRED - Test everything
// - Unit tests for all functions
// - Integration tests for workflows
// - Performance tests for critical paths
// - Error boundary tests

describe('processUserData', () => {
  it('should handle valid user data', () => {
    // Test happy path
  });
  
  it('should handle invalid user data', () => {
    // Test error cases
  });
  
  it('should complete within performance budget', async () => {
    const start = Date.now();
    await processUserData(testData);
    const duration = Date.now() - start;
    expect(duration).toBeLessThan(100); // 100ms budget
  });
});
```

## 🚀 PERFORMANCE OPTIMIZATION RULES

### Bundle Size Optimization
```typescript
// ✅ REQUIRED - Tree shaking friendly
// - Use named imports
// - Avoid default exports for utilities
// - Use dynamic imports for large dependencies

// ❌ FORBIDDEN - Imports entire library
import * as lodash from 'lodash';

// ✅ REQUIRED - Import only what's needed
import { debounce, throttle } from 'lodash';

// ✅ REQUIRED - Dynamic imports for large dependencies
const { default: heavyLibrary } = await import('heavy-library');
```

### Memory Management
```typescript
// ✅ REQUIRED - Cleanup resources
const useResourceManager = () => {
  useEffect(() => {
    const resource = createResource();
    
    return () => {
      resource.cleanup(); // Always cleanup
    };
  }, []);
};

// ✅ REQUIRED - Avoid memory leaks
const processLargeDataset = (data: LargeDataset) => {
  // Process in chunks to avoid memory issues
  const chunkSize = 1000;
  for (let i = 0; i < data.length; i += chunkSize) {
    const chunk = data.slice(i, i + chunkSize);
    processChunk(chunk);
  }
};
```

## 🎯 COMPETITIVE ADVANTAGE RULES

### Stay Ahead of Gemini CLI
```typescript
// ✅ REQUIRED - Monitor our advantages
// 1. Startup time: <50ms (measure every build)
// 2. Bundle size: <5MB (track with bundlewatch)
// 3. Memory usage: <40MB (profile regularly)
// 4. Zero console pollution (enforce with linting)
// 5. 100% TypeScript coverage (no JS files)

// ✅ REQUIRED - Performance budgets
const PERFORMANCE_BUDGETS = {
  STARTUP_TIME: 50, // ms
  BUNDLE_SIZE: 5 * 1024 * 1024, // 5MB
  MEMORY_USAGE: 40 * 1024 * 1024, // 40MB
  CONSOLE_STATEMENTS: 0 // Zero tolerance
} as const;
```

### Code Quality Metrics
```typescript
// ✅ REQUIRED - Maintain quality standards
// - Cyclomatic complexity: <10 per function
// - File size: <300 lines
// - Function length: <50 lines
// - Test coverage: >90%
// - TypeScript strict mode: 100%

// ✅ REQUIRED - Quality gates
const QUALITY_GATES = {
  MAX_FUNCTION_COMPLEXITY: 10,
  MAX_FILE_LINES: 300,
  MAX_FUNCTION_LINES: 50,
  MIN_TEST_COVERAGE: 90,
  TYPESCRIPT_STRICT: true
} as const;
```

## 🔒 SECURITY & RELIABILITY RULES

### Input Validation
```typescript
// ✅ REQUIRED - Validate all inputs
import { z } from 'zod';

const UserInputSchema = z.object({
  name: z.string().min(1).max(100),
  email: z.string().email(),
  age: z.number().min(0).max(150)
});

const validateUserInput = (input: unknown): UserInput => {
  return UserInputSchema.parse(input);
};
```

### Error Boundaries
```typescript
// ✅ REQUIRED - Graceful error handling
class ErrorBoundary extends React.Component {
  state = { hasError: false };
  
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  
  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    logger.error('Uncaught error:', { error, errorInfo });
  }
  
  render() {
    if (this.state.hasError) {
      return <ErrorFallback />;
    }
    return this.props.children;
  }
}
```

## 📊 MONITORING & METRICS

### Performance Monitoring
```typescript
// ✅ REQUIRED - Track performance metrics
const performanceMonitor = {
  startupTime: () => {
    const start = performance.now();
    return () => performance.now() - start;
  },
  
  memoryUsage: () => {
    return process.memoryUsage();
  },
  
  bundleSize: () => {
    return fs.statSync('dist/cli.js').size;
  }
};
```

### Success Metrics vs Gemini CLI
```typescript
// ✅ REQUIRED - Maintain competitive advantage
const COMPETITIVE_METRICS = {
  startupTime: '<50ms (vs Gemini 200ms)',
  bundleSize: '<5MB (vs Gemini 20MB+)',
  memoryUsage: '<40MB (vs Gemini 100MB+)',
  consolePollution: '0 (vs Gemini 100+)',
  typeScriptCoverage: '100% (vs Gemini mixed)',
  testCoverage: '>90% (vs Gemini unknown)',
  codeQuality: 'A+ (vs Gemini C+)'
} as const;
```

## 🎉 FINAL REMINDERS

1. **Performance First**: Every decision should consider impact on startup time and bundle size
2. **Type Safety**: 100% TypeScript strict mode, no exceptions
3. **Zero Console Pollution**: Use proper logging, never console.* in production
4. **Functional Patterns**: Pure functions, immutable data, declarative code
5. **Error Handling**: Early returns, guard clauses, proper error types
6. **Testing**: Test everything, maintain >90% coverage
7. **Monitoring**: Track metrics, maintain competitive advantage
8. **Clean Code**: Readable, maintainable, well-documented code

**Remember**: We're not just building a CLI, we're demonstrating how disciplined development practices can create superior software with less code, better performance, and higher quality than established competitors like Gemini CLI. 

# VIBEX CLI DEVELOPMENT RULES: BEAT GEMINI CLI + MEMORY MASTERY

## 🎯 CORE MISSION: SUPERIOR TO GEMINI CLI IN EVERY METRIC
- **Startup Time**: <50ms (vs Gemini's 200ms) - 4x faster
- **Bundle Size**: <5MB (vs Gemini's 20MB+) - 4x smaller  
- **Memory Usage**: <40MB (vs Gemini's 100MB+) - 2.5x more efficient
- **Console Pollution**: 0 statements (vs Gemini's 100+) - 100% cleaner
- **Code Quality**: 100% TypeScript strict mode (vs Gemini's mixed JS/TS)
- **Context Efficiency**: Optimized token usage for maximum AI performance

## 🧠 MEMORY & CONTEXT MANAGEMENT RULES

### Context Window Optimization
- **Minimize token usage** in every interaction
- **Be precise and concise** - avoid verbose explanations
- **Reference existing patterns** instead of re-explaining them
- **Batch related operations** to reduce context switching overhead
- **Prioritize actionable information** over background context

### AI Interaction Patterns
```typescript
// ✅ REQUIRED - Efficient AI collaboration
// Be specific: "Fix the memory leak in UserCache.ts line 45"
// Not: "There might be some issues with memory management"

// ✅ REQUIRED - Structured requests
// 1. State the exact problem
// 2. Show the relevant code snippet
// 3. Specify the desired outcome
```

### Memory Lifecycle Management
- **Clean up resources** immediately after use
- **Use WeakMap/WeakSet** for temporary object references
- **Implement proper disposal patterns** for event listeners
- **Monitor memory usage** in development
- **Avoid memory leaks** through proper cleanup

## 🚨 IMMEDIATE ERRORS TO CATCH

### TypeScript Errors - FIX IMMEDIATELY
```typescript
// ❌ FORBIDDEN - Will break our type safety
any
@ts-ignore  // without detailed explanation
@ts-expect-error  // without test case
as any
<any>
Function  // Use proper function signatures
Object    // Use proper object types
{}        // Use proper interface/type
```

### Performance Killers - AVOID AT ALL COSTS
```typescript
// ❌ FORBIDDEN - Blocks event loop like Gemini CLI
import { execSync, readFileSync } from 'fs';
const result = execSync('command');  // Blocks everything
const content = readFileSync('file.txt');  // Blocks everything

// ✅ REQUIRED - Async operations
import { exec } from 'child_process';
import { readFile } from 'fs/promises';
const result = await exec('command');
const content = await readFile('file.txt');
```

### Console Pollution (Gemini CLI Has 100+)
```typescript
// ❌ FORBIDDEN - Slows down execution
console.log('debug info');
console.error('Something went wrong');
console.warn('Warning message');

// ✅ REQUIRED - Use proper logging
import { logger } from '../utils/logger.js';
logger.debug('debug info');
logger.error('Something went wrong');
logger.warn('Warning message');
```

## 🏗️ ARCHITECTURE PATTERNS TO ENFORCE

### Functional Programming (Beats Gemini's OOP Mess)
```typescript
// ✅ REQUIRED - Pure functions with clear input/output
export function processUserData(
  input: UserInput,
  config: ProcessingConfig
): ProcessedUser {
  // No side effects, clear transformation
  return transformData(input, config);
}

// ❌ FORBIDDEN - Classes for business logic (Gemini pattern)
class UserProcessor {
  process(input: any): any { /* hidden state mutations */ }
}
```

### Dependency Injection (Clean Architecture)
```typescript
// ✅ REQUIRED - Inject dependencies
export function createUserService(
  database: Database,
  logger: Logger,
  config: Config
): UserService {
  return {
    async getUser(id: string) {
      logger.debug(`Fetching user ${id}`);
      return database.users.findById(id);
    }
  };
}

// ❌ FORBIDDEN - Global dependencies (Gemini pattern)
import { globalDatabase } from './globals';
```

### Error Handling (No String Throwing)
```typescript
// ✅ REQUIRED - Structured error types
export class UserError extends Error {
  constructor(
    message: string,
    public readonly code: string,
    public readonly category: ErrorCategory
  ) {
    super(message);
    this.name = 'UserError';
  }
}

// ❌ FORBIDDEN - Generic errors (Gemini pattern)
throw new Error('Something went wrong');
throw 'String error';
```

## 📏 CODE QUALITY STANDARDS

### File Size Limits (Gemini Has 500+ Line Files)
- **Maximum 300 lines per file** (vs Gemini's 500+)
- **Maximum 50 lines per function** (vs Gemini's 100+)
- **Split large files** into focused modules
- **Extract reusable utilities** into separate files

### Variable Naming (No Generic Names)
```typescript
// ✅ REQUIRED - Descriptive names
const userAuthToken = generateToken(user);
const validatedUserInput = validateInput(rawInput);
const processedApiResponse = processResponse(response);

// ❌ FORBIDDEN - Generic names (Gemini pattern)
const data = getData();
const result = process();
const item = getItem();
const temp = calculate();
```

### Function Complexity
```typescript
// ✅ REQUIRED - Guard clauses, early returns
export function processUser(user: User): ProcessedUser {
  if (!user) throw new UserError('User is required', 'INVALID_INPUT');
  if (!user.email) throw new UserError('Email is required', 'INVALID_EMAIL');
  
  // Happy path last
  return {
    id: user.id,
    email: normalizeEmail(user.email),
    profile: buildProfile(user)
  };
}

// ❌ FORBIDDEN - Nested if statements (Gemini pattern)
export function processUser(user: any): any {
  if (user) {
    if (user.email) {
      if (isValid(user.email)) {
        // Deep nesting hell
      }
    }
  }
}
```

## 🔧 DEVELOPMENT WORKFLOW

### Pre-Commit Checks (Automated Quality)
```bash
# ALWAYS run these before committing
npm run lint:check      # ESLint validation
npm run typecheck      # TypeScript validation  
npm run test          # Unit tests
npm run build         # Build verification
```

### Performance Monitoring
```bash
# Check our competitive metrics
time node dist/cli.js --version  # Should be <50ms
du -sh dist/                     # Should be <5MB
ps aux | grep node              # Should be <40MB RAM
```

### Commit Standards
```bash
# ✅ REQUIRED - Conventional commits
feat: add user authentication system
fix: resolve memory leak in cache manager
docs: update API documentation
chore: upgrade dependencies

# ❌ FORBIDDEN - Vague commits (Gemini pattern)
git commit -m "fixes"
git commit -m "updates"
git commit -m "changes"
```

## 🚀 PERFORMANCE OPTIMIZATIONS

### Bundle Size Management
- **Tree shake unused code** aggressively
- **Use dynamic imports** for optional features
- **Minimize dependencies** (27 vs Gemini's 40+)
- **Optimize TypeScript compilation** with strict settings

### Memory Optimization
```typescript
// ✅ REQUIRED - Efficient memory patterns
const cache = new Map<string, WeakRef<CachedData>>();
const cleanup = () => {
  for (const [key, ref] of cache) {
    if (!ref.deref()) cache.delete(key);
  }
};

// ❌ FORBIDDEN - Memory leaks (Gemini pattern)
const globalCache: any = {};  // Never cleaned up
```

### Async Operations
```typescript
// ✅ REQUIRED - Concurrent operations
const [users, posts, comments] = await Promise.all([
  fetchUsers(),
  fetchPosts(), 
  fetchComments()
]);

// ❌ FORBIDDEN - Sequential operations (Gemini pattern)
const users = await fetchUsers();
const posts = await fetchPosts();
const comments = await fetchComments();
```

## 🎨 AI COLLABORATION PATTERNS

### Effective Prompting
- **Start with context**: "In the UserService class..."
- **Be specific**: "Add error handling for network timeouts"
- **Request tests**: "Include unit tests for edge cases"
- **Ask for documentation**: "Add JSDoc comments"

### Code Review Requests
```typescript
// ✅ REQUIRED - Structured review requests
// "Review this function for:
// 1. Type safety
// 2. Error handling  
// 3. Performance implications
// 4. Memory leaks"

// ❌ FORBIDDEN - Vague requests
// "Look at this code"
// "Is this good?"
```

### Iteration Patterns
- **Small, focused changes** over large refactors
- **Test after each change** to catch regressions
- **Document decisions** for future reference
- **Measure performance impact** of changes

## 🔍 QUALITY GATES

### Definition of Done
- [ ] TypeScript strict mode passes
- [ ] ESLint rules pass (0 violations)
- [ ] Unit tests pass (90%+ coverage)
- [ ] Performance benchmarks met
- [ ] Memory usage under limits
- [ ] Documentation updated
- [ ] No console pollution

### Code Review Checklist
- [ ] No `any` types used
- [ ] Proper error handling implemented
- [ ] Functions under 50 lines
- [ ] Files under 300 lines
- [ ] No memory leaks
- [ ] Async patterns used correctly
- [ ] Tests cover edge cases

## 🎯 SUCCESS METRICS

### Performance Targets (Beat Gemini CLI)
- **Startup**: <50ms (4x faster than Gemini)
- **Bundle**: <5MB (4x smaller than Gemini)  
- **Memory**: <40MB (2.5x more efficient than Gemini)
- **Build**: <10s (6x faster than Gemini)
- **Tests**: <5s (10x faster than Gemini)

### Quality Targets
- **Type Coverage**: 100% (vs Gemini's mixed JS/TS)
- **Test Coverage**: 90%+ (vs Gemini's unknown)
- **ESLint Violations**: 0 (vs Gemini's many)
- **Console Statements**: 0 (vs Gemini's 100+)
- **Dependencies**: <30 (vs Gemini's 40+)

Remember: Every line of code should make Vibex CLI faster, smaller, and more reliable than Gemini CLI. We're not just building software - we're demonstrating that disciplined architecture and performance optimization can dramatically outperform larger, more established competitors. 