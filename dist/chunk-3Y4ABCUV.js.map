{"version":3,"sources":["../src/errors/types.ts","../src/utils/logger.ts"],"sourcesContent":["/**\n * Error Type Definitions and Base Classes\n * \n * This module defines the foundational types and classes for the application's\n * error handling system. It includes:\n * \n * - ErrorLevel enumeration for categorizing error severity\n * - ErrorCategory enumeration providing a comprehensive taxonomy of error types\n * - Base error class implementations with standardized properties\n * - Type definitions for error options and configuration\n * - Interface definitions for error context and metadata\n * - Extended error classes with specialized behavior\n * \n * These types provide the structural foundation for consistent error handling\n * and reporting throughout the application, enabling rich error context and\n * appropriate error classification.\n */\n\n/**\n * Error level\n */\nexport enum ErrorLevel {\n  /**\n   * Critical errors that prevent the application from functioning\n   */\n  CRITICAL,\n  \n  /**\n   * Major errors that significantly impact functionality\n   */\n  MAJOR,\n  \n  /**\n   * Minor errors that don't significantly impact functionality\n   */\n  MINOR,\n  \n  /**\n   * Informational errors that don't impact functionality\n   */\n  INFORMATIONAL,\n}\n\n/**\n * Error categories for classification\n */\nexport enum ErrorCategory {\n  /**\n   * Application-level errors\n   */\n  APPLICATION = 0,\n  \n  /**\n   * Authentication-related errors\n   */\n  AUTHENTICATION = 1,\n  \n  /**\n   * Network-related errors\n   */\n  NETWORK = 2,\n  \n  /**\n   * File system-related errors\n   */\n  FILE_SYSTEM = 3,\n  \n  /**\n   * Command execution-related errors\n   */\n  COMMAND_EXECUTION = 4,\n  \n  /**\n   * AI service-related errors\n   */\n  AI_SERVICE = 5,\n  \n  /**\n   * Configuration-related errors\n   */\n  CONFIGURATION = 6,\n  \n  /**\n   * Resource-related errors\n   */\n  RESOURCE = 7,\n  \n  /**\n   * Unknown errors\n   */\n  UNKNOWN = 8,\n  \n  /**\n   * Internal errors\n   */\n  INTERNAL = 9,\n  \n  /**\n   * Validation errors\n   */\n  VALIDATION = 10,\n  \n  /**\n   * Initialization errors\n   */\n  INITIALIZATION = 11,\n  \n  /**\n   * Server errors\n   */\n  SERVER = 12,\n  \n  /**\n   * API errors\n   */\n  API = 13,\n  \n  /**\n   * Timeout errors\n   */\n  TIMEOUT = 14,\n  \n  /**\n   * Rate limit errors\n   */\n  RATE_LIMIT = 15,\n  \n  /**\n   * Connection errors\n   */\n  CONNECTION = 16,\n  \n  /**\n   * Authorization errors\n   */\n  AUTHORIZATION = 17,\n  \n  /**\n   * File not found errors\n   */\n  FILE_NOT_FOUND = 18,\n  \n  /**\n   * File access errors\n   */\n  FILE_ACCESS = 19,\n  \n  /**\n   * File read errors\n   */\n  FILE_READ = 20,\n  \n  /**\n   * File write errors\n   */\n  FILE_WRITE = 21,\n  \n  /**\n   * Command errors\n   */\n  COMMAND = 22,\n  \n  /**\n   * Command not found errors\n   */\n  COMMAND_NOT_FOUND = 23\n}\n\n/**\n * Error options for error handling\n */\nexport interface ErrorOptions {\n  /**\n   * Error level\n   */\n  level?: ErrorLevel;\n  \n  /**\n   * Error category\n   */\n  category?: ErrorCategory;\n  \n  /**\n   * Additional context for the error\n   */\n  context?: Record<string, any>;\n  \n  /**\n   * Whether to report the error to monitoring systems\n   */\n  report?: boolean;\n  \n  /**\n   * User message to display\n   */\n  userMessage?: string;\n  \n  /**\n   * Suggested resolution steps\n   */\n  resolution?: string | string[];\n}\n\n/**\n * User error options\n */\nexport interface UserErrorOptions {\n  /**\n   * Original error that caused this error\n   */\n  cause?: unknown;\n  \n  /**\n   * Error category\n   */\n  category?: ErrorCategory;\n  \n  /**\n   * Error level\n   */\n  level?: ErrorLevel;\n  \n  /**\n   * Hint on how to resolve the error\n   */\n  resolution?: string | string[];\n  \n  /**\n   * Additional details about the error\n   */\n  details?: Record<string, unknown>;\n  \n  /**\n   * Error code\n   */\n  code?: string;\n}\n\n/**\n * User error\n */\nexport class UserError extends Error {\n  /**\n   * Original error that caused this error\n   */\n  cause?: unknown;\n  \n  /**\n   * Error category\n   */\n  category: ErrorCategory;\n  \n  /**\n   * Error level\n   */\n  level: ErrorLevel;\n  \n  /**\n   * Hint on how to resolve the error\n   */\n  resolution?: string | string[];\n  \n  /**\n   * Additional details about the error\n   */\n  details: Record<string, unknown>;\n  \n  /**\n   * Error code\n   */\n  code?: string;\n  \n  /**\n   * Create a new user error\n   */\n  constructor(message: string, options: UserErrorOptions = {}) {\n    super(message);\n    \n    this.name = 'UserError';\n    this.cause = options.cause;\n    this.category = options.category ?? ErrorCategory.UNKNOWN;\n    this.level = options.level ?? ErrorLevel.MINOR;\n    this.resolution = options.resolution;\n    this.details = options.details ?? {};\n    this.code = options.code;\n    \n    // Capture stack trace\n    Error.captureStackTrace?.(this, UserError);\n  }\n} ","/**\n * Structured Logging System\n * \n * This module provides a comprehensive logging infrastructure for the entire\n * application, enabling consistent, configurable logging across all components.\n * Key features include:\n * \n * - Multiple log levels (DEBUG, INFO, WARN, ERROR, SILENT)\n * - Structured log formats with context and metadata\n * - Configurable log destinations (console, file, remote)\n * - Color-coded console output for improved readability\n * - Timestamp generation and formatting\n * - Category-based logging for component identification\n * - Performance metrics and timing utilities\n * - Integration with error handling system\n * - Context preservation for tracking related log entries\n * - Log filtering capabilities based on level and category\n * \n * The logger implementation is designed to be both developer-friendly for\n * troubleshooting and machine-readable for log aggregation systems.\n */\n\nimport { ErrorLevel } from '../errors/types';\n\n/**\n * Log levels\n */\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  SILENT = 4\n}\n\n/**\n * Logger configuration\n */\nexport interface LoggerConfig {\n  /**\n   * Minimum log level to display\n   */\n  level: LogLevel;\n  \n  /**\n   * Whether to include timestamps in logs\n   */\n  timestamps: boolean;\n  \n  /**\n   * Whether to colorize output\n   */\n  colors: boolean;\n  \n  /**\n   * Whether to include additional context in logs\n   */\n  verbose: boolean;\n  \n  /**\n   * Custom output destination (defaults to console)\n   */\n  destination?: (message: string, level: LogLevel, metadata?: any) => void;\n}\n\n/**\n * Default logger configuration\n */\nconst DEFAULT_CONFIG: LoggerConfig = {\n  level: LogLevel.INFO,\n  timestamps: true,\n  colors: true,\n  verbose: false\n};\n\n/**\n * Log format options\n */\nexport interface LogFormatOptions {\n  /**\n   * Whether to include timestamp\n   */\n  timestamp?: boolean;\n\n  /**\n   * Whether to colorize output\n   */\n  colors?: boolean;\n\n  /**\n   * Whether to include level\n   */\n  level?: boolean;\n\n  /**\n   * Whether to include metadata\n   */\n  metadata?: boolean;\n\n  /**\n   * Indent level (number of spaces)\n   */\n  indent?: number;\n}\n\n/**\n * Logger class\n */\nexport class Logger {\n  private config: LoggerConfig;\n  \n  /**\n   * Create a new logger\n   */\n  constructor(config: Partial<LoggerConfig> = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n  }\n  \n  /**\n   * Set logger configuration\n   */\n  configure(config: Partial<LoggerConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n  \n  /**\n   * Set log level\n   */\n  setLevel(level: LogLevel): void {\n    this.config.level = level;\n  }\n  \n  /**\n   * Log a debug message\n   */\n  debug(message: string, metadata?: any): void {\n    this.log(message, LogLevel.DEBUG, metadata);\n  }\n  \n  /**\n   * Log an info message\n   */\n  info(message: string, metadata?: any): void {\n    this.log(message, LogLevel.INFO, metadata);\n  }\n  \n  /**\n   * Log a warning message\n   */\n  warn(message: string, metadata?: any): void {\n    this.log(message, LogLevel.WARN, metadata);\n  }\n  \n  /**\n   * Log an error message\n   */\n  error(message: string, metadata?: any): void {\n    this.log(message, LogLevel.ERROR, metadata);\n  }\n  \n  /**\n   * Log a message with level\n   */\n  log(message: string, level: LogLevel, metadata?: any): void {\n    // Check if this log level should be displayed\n    if (level < this.config.level) {\n      return;\n    }\n    \n    // Format the message\n    const formattedMessage = this.formatMessage(message, level, metadata);\n    \n    // Send to destination\n    if (this.config.destination) {\n      this.config.destination(formattedMessage, level, metadata);\n    } else {\n      this.logToConsole(formattedMessage, level);\n    }\n  }\n  \n  /**\n   * Format a message for logging\n   */\n  formatMessage(message: string, level: LogLevel, metadata?: any, options?: LogFormatOptions): string {\n    // Default options\n    const opts = {\n      timestamp: this.config.timestamps,\n      colors: this.config.colors,\n      level: true,\n      metadata: this.config.verbose,\n      indent: 0,\n      ...options\n    };\n    \n    let result = '';\n    \n    // Add indentation\n    if (opts.indent > 0) {\n      result += ' '.repeat(opts.indent);\n    }\n    \n    // Add timestamp if enabled\n    if (opts.timestamp) {\n      const timestamp = new Date().toISOString();\n      result += `[${timestamp}] `;\n    }\n    \n    // Add log level\n    if (opts.level) {\n      result += `${this.getLevelPrefix(level)}: `;\n    }\n    \n    // Add message\n    result += message;\n    \n    // Add metadata if verbose and metadata is provided\n    if (opts.metadata && metadata) {\n      try {\n        if (typeof metadata === 'object') {\n          const metadataStr = JSON.stringify(metadata, this.replacer);\n          result += ` ${metadataStr}`;\n        } else {\n          result += ` ${metadata}`;\n        }\n      } catch (error) {\n        result += ' [Failed to serialize metadata]';\n      }\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Helper function for handling circular references in JSON.stringify\n   */\n  private replacer(key: string, value: any): any {\n    if (value instanceof Error) {\n      // Spread the error object first, then override with specific properties\n      // This avoids duplicate property issues\n      const errorObj: any = { ...value };\n      errorObj.message = value.message;\n      errorObj.stack = value.stack;\n      errorObj.name = value.name;\n      return errorObj;\n    }\n    \n    return value;\n  }\n  \n  /**\n   * Get a prefix for a log level\n   */\n  private getLevelPrefix(level: LogLevel): string {\n    switch (level) {\n      case LogLevel.DEBUG:\n        return this.colorize('DEBUG', '\\x1b[36m'); // Cyan\n      case LogLevel.INFO:\n        return this.colorize('INFO', '\\x1b[32m');  // Green\n      case LogLevel.WARN:\n        return this.colorize('WARN', '\\x1b[33m');  // Yellow\n      case LogLevel.ERROR:\n        return this.colorize('ERROR', '\\x1b[31m'); // Red\n      default:\n        return 'UNKNOWN';\n    }\n  }\n  \n  /**\n   * Colorize a string if colors are enabled\n   */\n  colorize(text: string, colorCode: string): string {\n    if (!this.config.colors) {\n      return text;\n    }\n    \n    return `${colorCode}${text}\\x1b[0m`;\n  }\n  \n  /**\n   * Log to console\n   */\n  private logToConsole(message: string, level: LogLevel): void {\n    switch (level) {\n      case LogLevel.DEBUG:\n        console.debug(message);\n        break;\n      case LogLevel.INFO:\n        console.info(message);\n        break;\n      case LogLevel.WARN:\n        console.warn(message);\n        break;\n      case LogLevel.ERROR:\n        console.error(message);\n        break;\n    }\n  }\n  \n  /**\n   * Convert a string to a LogLevel\n   */\n  stringToLogLevel(level: string): LogLevel {\n    switch (level.toLowerCase()) {\n      case 'debug': return LogLevel.DEBUG;\n      case 'info': return LogLevel.INFO;\n      case 'warn': return LogLevel.WARN;\n      case 'error': return LogLevel.ERROR;\n      case 'silent': return LogLevel.SILENT;\n      default: return LogLevel.INFO;\n    }\n  }\n  \n  /**\n   * Convert an error level to a log level\n   */\n  errorLevelToLogLevel(level: ErrorLevel): LogLevel {\n    switch (level) {\n      case ErrorLevel.CRITICAL:\n        return LogLevel.ERROR;\n      case ErrorLevel.MAJOR:\n        return LogLevel.ERROR;\n      case ErrorLevel.MINOR:\n        return LogLevel.WARN;\n      case ErrorLevel.INFORMATIONAL:\n        return LogLevel.INFO;\n      default:\n        return LogLevel.INFO;\n    }\n  }\n}\n\n/**\n * Create a standard log context object\n */\nexport function createLogContext(category: string, data?: any): Record<string, any> {\n  const context: Record<string, any> = { category };\n  \n  if (data) {\n    if (typeof data === 'object' && data !== null) {\n      // Merge data into context\n      Object.assign(context, data);\n    } else {\n      // Add data as a property\n      context.data = data;\n    }\n  }\n  \n  return context;\n}\n\n// Create singleton logger instance\nexport const logger = new Logger();\n\n// Configure logger based on environment\nif (process.env.NODE_ENV === 'development' || process.env.DEBUG === 'true') {\n  logger.setLevel(LogLevel.DEBUG);\n} else if (process.env.VERBOSE === 'true') {\n  logger.configure({ verbose: true });\n} else if (process.env.LOG_LEVEL) {\n  const logLevelStr = process.env.LOG_LEVEL.toLowerCase();\n  \n  switch (logLevelStr) {\n    case 'debug': logger.setLevel(LogLevel.DEBUG); break;\n    case 'info': logger.setLevel(LogLevel.INFO); break;\n    case 'warn': logger.setLevel(LogLevel.WARN); break;\n    case 'error': logger.setLevel(LogLevel.ERROR); break;\n    case 'silent': logger.setLevel(LogLevel.SILENT); break;\n  }\n}\n\nexport default logger;"],"mappings":"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","names":["LogLevel"]}