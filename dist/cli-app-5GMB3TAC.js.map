{"version":3,"sources":["../src/ui/cli-app.tsx","../src/ui/colors.ts"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { render, Box, Text, useInput, useApp } from 'ink';\nimport { Colors } from './colors.js';\n\ninterface CLIAppProps {\n  startupWarnings?: string[];\n  theme?: string;\n  onCommand?: (command: string) => Promise<void>;\n  onExit?: () => void;\n}\n\ninterface Message {\n  id: string;\n  type: 'user' | 'assistant' | 'system' | 'error';\n  content: string;\n  timestamp: Date;\n}\n\nexport const CLIApp: React.FC<CLIAppProps> = ({ \n  startupWarnings = [], \n  theme = 'dark',\n  onCommand,\n  onExit \n}) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { exit } = useApp();\n\n  // Add startup messages\n  useEffect(() => {\n    const welcomeMessage: Message = {\n      id: 'welcome',\n      type: 'system',\n      content: `Welcome to Vibex! Type /help to see available commands.\\nYou can ask Claude to explain code, fix issues, or perform tasks.`,\n      timestamp: new Date()\n    };\n\n    setMessages([welcomeMessage]);\n\n    if (startupWarnings.length > 0) {\n      const warningMessage: Message = {\n        id: 'warnings',\n        type: 'system',\n        content: `Startup warnings:\\n${startupWarnings.map(w => `‚Ä¢ ${w}`).join('\\n')}`,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, warningMessage]);\n    }\n  }, [startupWarnings]);\n\n  // Handle user input\n  useInput(useCallback((input, key) => {\n    if (key.return) {\n      handleSubmit();\n    } else if (key.backspace) {\n      setInput(prev => prev.slice(0, -1));\n    } else if (key.ctrl && input === 'c') {\n      if (onExit) {\n        onExit();\n      } else {\n        exit();\n      }\n    } else if (input && !key.ctrl && !key.meta) {\n      setInput(prev => prev + input);\n    }\n  }, [input, onExit, exit]));\n\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: input.trim(),\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    const command = input.trim();\n    setInput('');\n\n    // Handle exit commands\n    if (['exit', 'quit', '/exit', '/quit'].includes(command.toLowerCase())) {\n      if (onExit) {\n        onExit();\n      } else {\n        exit();\n      }\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      if (onCommand) {\n        await onCommand(command);\n      } else {\n        // Default command handling\n        if (command.startsWith('/')) {\n          const responseMessage: Message = {\n            id: (Date.now() + 1).toString(),\n            type: 'system',\n            content: `Command \"${command}\" executed.`,\n            timestamp: new Date()\n          };\n          setMessages(prev => [...prev, responseMessage]);\n        } else {\n          const responseMessage: Message = {\n            id: (Date.now() + 1).toString(),\n            type: 'assistant',\n            content: `I received your message: \"${command}\". AI functionality will be available once authentication is set up.`,\n            timestamp: new Date()\n          };\n          setMessages(prev => [...prev, responseMessage]);\n        }\n      }\n    } catch (error) {\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'error',\n        content: `Error: ${error instanceof Error ? error.message : String(error)}`,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const getMessageColor = (type: Message['type']) => {\n    switch (type) {\n      case 'user': return Colors.Primary;\n      case 'assistant': return Colors.Secondary;\n      case 'system': return Colors.Info;\n      case 'error': return Colors.Error;\n      default: return Colors.Text;\n    }\n  };\n\n  const getMessagePrefix = (type: Message['type']) => {\n    switch (type) {\n      case 'user': return 'You';\n      case 'assistant': return 'Claude';\n      case 'system': return 'System';\n      case 'error': return 'Error';\n      default: return '';\n    }\n  };\n\n  return (\n    <Box flexDirection=\"column\" height=\"100%\">\n      {/* Header */}\n      <Box borderStyle=\"round\" borderColor={Colors.Primary} paddingX={1} marginBottom={1}>\n        <Text color={Colors.Primary} bold>\n          üöÄ Vibex - AI-Powered Development Assistant\n        </Text>\n      </Box>\n\n      {/* Messages */}\n      <Box flexDirection=\"column\" flexGrow={1} paddingX={1}>\n        {messages.map((message) => (\n          <Box key={message.id} marginBottom={1} flexDirection=\"column\">\n            <Box>\n              <Text color={getMessageColor(message.type)} bold>\n                {getMessagePrefix(message.type)}\n              </Text>\n              <Text color={Colors.TextDim}>\n                {' '}({message.timestamp.toLocaleTimeString()})\n              </Text>\n            </Box>\n            <Box paddingLeft={2}>\n              <Text color={message.type === 'error' ? Colors.Error : Colors.Text}>\n                {message.content}\n              </Text>\n            </Box>\n          </Box>\n        ))}\n        \n        {isProcessing && (\n          <Box marginBottom={1}>\n            <Text color={Colors.TextDim}>\n              Processing...\n            </Text>\n          </Box>\n        )}\n      </Box>\n\n      {/* Input */}\n      <Box borderStyle=\"round\" borderColor={Colors.Secondary} paddingX={1}>\n        <Text color={Colors.Secondary}>‚ùØ </Text>\n        <Text color={Colors.Text}>{input}</Text>\n        <Text color={Colors.TextDim}>_</Text>\n      </Box>\n\n      {/* Help text */}\n      <Box paddingX={1} paddingY={0}>\n        <Text color={Colors.TextDim}>\n          Type your message and press Enter. Use Ctrl+C to exit.\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport function startUI(options: { \n  startupWarnings?: string[]; \n  theme?: string;\n  onCommand?: (command: string) => Promise<void>;\n  onExit?: () => void;\n}) {\n  return render(\n    <CLIApp \n      startupWarnings={options.startupWarnings}\n      theme={options.theme}\n      onCommand={options.onCommand}\n      onExit={options.onExit}\n    />\n  );\n} ","/**\n * UI Colors\n * \n * This module defines the color palette used throughout the UI.\n * It provides consistent color references for all components.\n * \n * NOTE: These are default colors that can be overridden by themes.\n * See the themes directory for theme-specific color palettes.\n */\n\n/**\n * Primary colors\n */\nexport const Colors = {\n  // Brand colors\n  Primary: '#7055FF',\n  Secondary: '#9580FF',\n  \n  // UI state colors\n  Success: '#3EBD93',\n  Warning: '#FFC53D',\n  Error: '#E53E3E',\n  Info: '#63B3ED',\n  \n  // Text colors\n  Text: '#F8F9FA',\n  TextMuted: '#A0AEC0',\n  TextDim: '#718096',\n  \n  // Background colors\n  Background: '#1A202C',\n  BackgroundAlt: '#2D3748',\n  \n  // Accent colors\n  AccentBlue: '#4299E1',\n  AccentGreen: '#48BB78',\n  AccentRed: '#F56565',\n  AccentYellow: '#ECC94B',\n  AccentPurple: '#9F7AEA',\n  AccentCyan: '#0BC5EA',\n  \n  // Special use colors\n  Border: '#4A5568',\n  Code: '#805AD5',\n  CodeBackground: '#2D3748',\n  Link: '#90CDF4',\n  \n  // Grayscale\n  Black: '#000000',\n  White: '#FFFFFF',\n  Gray100: '#F7FAFC',\n  Gray200: '#EDF2F7',\n  Gray300: '#E2E8F0',\n  Gray400: '#CBD5E0',\n  Gray500: '#A0AEC0',\n  Gray600: '#718096',\n  Gray700: '#4A5568',\n  Gray800: '#2D3748',\n  Gray900: '#1A202C'\n};\n\n/**\n * Syntax highlighting colors for code blocks\n */\nexport interface SyntaxColors {\n  keyword: string;\n  string: string;\n  number: string;\n  comment: string;\n  operator: string;\n  function: string;\n  class: string;\n  type: string;\n  variable: string;\n  tag: string;\n  attribute: string;\n  property: string;\n  constant: string;\n  symbol: string;\n  builtin: string;\n  regex: string;\n}\n\n/**\n * Default syntax highlighting colors\n */\nexport const SyntaxColors = {\n  // Keywords\n  Keyword: '#C792EA',\n  \n  // Values\n  String: '#FFCB6B',\n  Number: '#F78C6C',\n  Boolean: '#FF5874',\n  Null: '#FF5874',\n  \n  // Variables and symbols\n  Variable: '#82AAFF',\n  Function: '#82AAFF',\n  Class: '#FFCB6B',\n  Property: '#B2CCD6',\n  \n  // Comments and metadata\n  Comment: '#546E7A',\n  DocComment: '#6A9955',\n  \n  // Operators and punctuation\n  Operator: '#89DDFF',\n  Punctuation: '#89DDFF',\n  \n  // Special\n  Regex: '#F78C6C',\n  Escape: '#89DDFF',\n  Tag: '#FF5572',\n  Attribute: '#82AAFF'\n};\n\n/**\n * Theme palette for dark mode\n */\nexport const DarkTheme = {\n  // Base colors\n  background: Colors.Background,\n  foreground: Colors.Text,\n  \n  // Accent colors\n  primary: Colors.Primary,\n  secondary: Colors.Secondary,\n  \n  // Status colors\n  success: Colors.Success,\n  warning: Colors.Warning, \n  error: Colors.Error,\n  info: Colors.Info,\n  \n  // Text variations\n  textMuted: Colors.TextMuted,\n  textDim: Colors.TextDim,\n  \n  // Borders and separators\n  border: Colors.Border,\n  \n  // Code colors\n  codeBackground: Colors.CodeBackground,\n  codeText: Colors.Gray100,\n  \n  // Input fields\n  inputBackground: Colors.Gray800,\n  inputBorder: Colors.Gray600,\n  inputFocusBorder: Colors.Primary,\n  inputPlaceholder: Colors.Gray500,\n  \n  // UI elements\n  uiElement: Colors.Gray700,\n  uiElementHover: Colors.Gray600,\n  uiElementActive: Colors.Primary\n};\n\n/**\n * Theme palette for light mode\n */\nexport const LightTheme = {\n  // Base colors\n  background: Colors.Gray100,\n  foreground: Colors.Gray900,\n  \n  // Accent colors\n  primary: Colors.Primary,\n  secondary: Colors.Secondary,\n  \n  // Status colors\n  success: Colors.Success,\n  warning: Colors.Warning,\n  error: Colors.Error,\n  info: Colors.Info,\n  \n  // Text variations\n  textMuted: Colors.Gray600,\n  textDim: Colors.Gray500,\n  \n  // Borders and separators\n  border: Colors.Gray400,\n  \n  // Code colors\n  codeBackground: Colors.Gray200,\n  codeText: Colors.Gray900,\n  \n  // Input fields\n  inputBackground: Colors.White,\n  inputBorder: Colors.Gray400,\n  inputFocusBorder: Colors.Primary,\n  inputPlaceholder: Colors.Gray500,\n  \n  // UI elements\n  uiElement: Colors.Gray300,\n  uiElementHover: Colors.Gray400,\n  uiElementActive: Colors.Primary\n};\n\n/**\n * ANSI Color codes for terminal output\n */\nexport const AnsiColors = {\n  Reset: '\\x1b[0m',\n  Bright: '\\x1b[1m',\n  Dim: '\\x1b[2m',\n  Underscore: '\\x1b[4m',\n  Blink: '\\x1b[5m',\n  Reverse: '\\x1b[7m',\n  Hidden: '\\x1b[8m',\n  \n  FgBlack: '\\x1b[30m',\n  FgRed: '\\x1b[31m',\n  FgGreen: '\\x1b[32m',\n  FgYellow: '\\x1b[33m',\n  FgBlue: '\\x1b[34m',\n  FgMagenta: '\\x1b[35m',\n  FgCyan: '\\x1b[36m',\n  FgWhite: '\\x1b[37m',\n  FgGray: '\\x1b[90m',\n  \n  BgBlack: '\\x1b[40m',\n  BgRed: '\\x1b[41m',\n  BgGreen: '\\x1b[42m',\n  BgYellow: '\\x1b[43m',\n  BgBlue: '\\x1b[44m',\n  BgMagenta: '\\x1b[45m',\n  BgCyan: '\\x1b[46m',\n  BgWhite: '\\x1b[47m',\n  BgGray: '\\x1b[100m'\n};"],"mappings":"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","names":["input"]}