{"version":3,"sources":["../src/ai/prompts.ts"],"sourcesContent":["/**\n * AI Prompts\n * \n * Contains prompt templates and utilities for formatting prompts \n * for different AI tasks and scenarios.\n */\n\nimport { Message } from './types.js';\n\n// Define MessageRole consts since we're using the type as values\nconst MESSAGE_ROLE = {\n  USER: 'user' as const,\n  ASSISTANT: 'assistant' as const,\n  SYSTEM: 'system' as const\n};\n\n/**\n * System prompt for code assistance\n */\nexport const CODE_ASSISTANT_SYSTEM_PROMPT = `\nYou are Claude, an AI assistant with expertise in programming and software development.\nYour task is to assist with coding-related questions, debugging, refactoring, and explaining code.\n\nGuidelines:\n- Provide clear, concise, and accurate responses\n- Include code examples where helpful\n- Prioritize modern best practices\n- If you're unsure, acknowledge limitations instead of guessing\n- Focus on understanding the user's intent, even if the question is ambiguous\n`;\n\n/**\n * System prompt for code generation\n */\nexport const CODE_GENERATION_SYSTEM_PROMPT = `\nYou are Claude, an AI assistant focused on helping write high-quality code.\nYour task is to generate code based on user requirements and specifications.\n\nGuidelines:\n- Write clean, efficient, and well-documented code\n- Follow language-specific best practices and conventions\n- Include helpful comments explaining complex sections\n- Prioritize maintainability and readability\n- Structure code logically with appropriate error handling\n- Consider edge cases and potential issues\n`;\n\n/**\n * System prompt for code review\n */\nexport const CODE_REVIEW_SYSTEM_PROMPT = `\nYou are Claude, an AI code reviewer with expertise in programming best practices.\nYour task is to analyze code, identify issues, and suggest improvements.\n\nGuidelines:\n- Look for bugs, security issues, and performance problems\n- Suggest improvements for readability and maintainability\n- Identify potential edge cases and error handling gaps\n- Point out violations of best practices or conventions\n- Provide constructive feedback with clear explanations\n- Be thorough but prioritize important issues over minor stylistic concerns\n`;\n\n/**\n * System prompt for explaining code\n */\nexport const CODE_EXPLANATION_SYSTEM_PROMPT = `\nYou are Claude, an AI assistant that specializes in explaining code.\nYour task is to break down and explain code in a clear, educational manner.\n\nGuidelines:\n- Explain the purpose and functionality of the code\n- Break down complex parts step by step\n- Define technical terms and concepts when relevant\n- Use analogies or examples to illustrate concepts\n- Focus on the core logic rather than trivial details\n- Adjust explanation depth based on the apparent complexity of the question\n`;\n\n/**\n * Interface for prompt templates\n */\nexport interface PromptTemplate {\n  /**\n   * Template string with {placeholders}\n   */\n  template: string;\n  \n  /**\n   * Optional system message to set context\n   */\n  system?: string;\n  \n  /**\n   * Default values for placeholders\n   */\n  defaults?: Record<string, string>;\n}\n\n/**\n * Collection of prompt templates for common tasks\n */\nexport const PROMPT_TEMPLATES: Record<string, PromptTemplate> = {\n  // Code assistance prompt templates\n  explainCode: {\n    template: \"Please explain what this code does:\\n\\n{code}\",\n    system: CODE_EXPLANATION_SYSTEM_PROMPT,\n    defaults: {\n      code: \"// Paste code here\"\n    }\n  },\n  \n  refactorCode: {\n    template: \"Please refactor this code to improve its {focus}:\\n\\n{code}\\n\\nAdditional context: {context}\",\n    system: CODE_GENERATION_SYSTEM_PROMPT,\n    defaults: {\n      focus: \"readability and maintainability\",\n      code: \"// Paste code here\",\n      context: \"None\"\n    }\n  },\n  \n  debugCode: {\n    template: \"Please help me debug the following code:\\n\\n{code}\\n\\nThe issue I'm seeing is: {issue}\\n\\nAny error messages: {errorMessages}\",\n    system: CODE_ASSISTANT_SYSTEM_PROMPT,\n    defaults: {\n      code: \"// Paste code here\",\n      issue: \"Describe the issue you're experiencing\",\n      errorMessages: \"None\"\n    }\n  },\n  \n  reviewCode: {\n    template: \"Please review this code and provide feedback:\\n\\n{code}\",\n    system: CODE_REVIEW_SYSTEM_PROMPT,\n    defaults: {\n      code: \"// Paste code here\"\n    }\n  },\n  \n  generateCode: {\n    template: \"Please write code to {task}.\\n\\nLanguage/Framework: {language}\\n\\nRequirements:\\n{requirements}\",\n    system: CODE_GENERATION_SYSTEM_PROMPT,\n    defaults: {\n      task: \"Describe what you want the code to do\",\n      language: \"Specify language or framework\",\n      requirements: \"- List your requirements here\"\n    }\n  },\n  \n  documentCode: {\n    template: \"Please add documentation to this code:\\n\\n{code}\\n\\nDocumentation style: {style}\",\n    system: CODE_GENERATION_SYSTEM_PROMPT,\n    defaults: {\n      code: \"// Paste code here\",\n      style: \"Standard comments and docstrings\"\n    }\n  },\n  \n  testCode: {\n    template: \"Please write tests for this code:\\n\\n{code}\\n\\nTesting framework: {framework}\",\n    system: CODE_GENERATION_SYSTEM_PROMPT,\n    defaults: {\n      code: \"// Paste code here\",\n      framework: \"Specify testing framework or 'standard'\"\n    }\n  }\n};\n\n/**\n * Format a prompt by replacing placeholders with values\n * \n * @param template The prompt template with {placeholders}\n * @param values Values to replace placeholders with\n * @param defaults Default values for placeholders not in values\n * @returns Formatted prompt string\n */\nexport function formatPrompt(\n  template: string,\n  values: Record<string, string | number | boolean>,\n  defaults: Record<string, string> = {}\n): string {\n  // Create a merged object of defaults and provided values\n  const mergedValues = { ...defaults, ...values };\n  \n  // Replace each placeholder with its value\n  return template.replace(\n    /{(\\w+)}/g, \n    (match, key) => {\n      const value = mergedValues[key];\n      return value !== undefined ? String(value) : match;\n    }\n  );\n}\n\n/**\n * Format a prompt using a predefined template\n * \n * @param templateName Name of the template from PROMPT_TEMPLATES\n * @param values Values to replace placeholders with\n * @returns Object with formatted prompt and system message\n */\nexport function usePromptTemplate(\n  templateName: string,\n  values: Record<string, string | number | boolean>\n): { prompt: string; system?: string } {\n  const template = PROMPT_TEMPLATES[templateName];\n  \n  if (!template) {\n    throw new Error(`Prompt template \"${templateName}\" not found`);\n  }\n  \n  return {\n    prompt: formatPrompt(template.template, values, template.defaults),\n    system: template.system\n  };\n}\n\n/**\n * Create a conversation from a prompt\n * \n * @param prompt User prompt string\n * @param system Optional system message\n * @returns Array of messages for the conversation\n */\nexport function createConversation(\n  prompt: string,\n  system?: string\n): Array<{ role: 'user' | 'assistant' | 'system'; content: string }> {\n  const messages = [];\n  \n  // Add system message if provided\n  if (system) {\n    messages.push({\n      role: MESSAGE_ROLE.SYSTEM,\n      content: system\n    });\n  }\n  \n  // Add user message\n  messages.push({\n    role: MESSAGE_ROLE.USER,\n    content: prompt\n  });\n  \n  return messages;\n}\n\n/**\n * Create a user message\n */\nexport function createUserMessage(content: string): Message {\n  return {\n    role: MESSAGE_ROLE.USER,\n    content\n  };\n}\n\n/**\n * Create a system message\n */\nexport function createSystemMessage(content: string): Message {\n  return {\n    role: MESSAGE_ROLE.SYSTEM,\n    content\n  };\n}\n\n/**\n * Create an assistant message\n */\nexport function createAssistantMessage(content: string): Message {\n  return {\n    role: MESSAGE_ROLE.ASSISTANT,\n    content\n  };\n}\n\n/**\n * Create a message with file context\n */\nexport function createFileContextMessage(\n  filePath: string,\n  content: string,\n  language?: string\n): string {\n  // Return a simpler content format that works with the current Message type\n  return `File: ${filePath}\\n\\n\\`\\`\\`${language || getLanguageFromFilePath(filePath)}\\n${content}\\n\\`\\`\\``;\n}\n\n/**\n * Get language from file path\n */\nfunction getLanguageFromFilePath(filePath: string): string {\n  const extension = filePath.split('.').pop()?.toLowerCase() || '';\n  \n  const languageMap: Record<string, string> = {\n    js: 'javascript',\n    ts: 'typescript',\n    jsx: 'javascript',\n    tsx: 'typescript',\n    py: 'python',\n    rb: 'ruby',\n    java: 'java',\n    c: 'c',\n    cpp: 'cpp',\n    cs: 'csharp',\n    go: 'go',\n    rs: 'rust',\n    php: 'php',\n    swift: 'swift',\n    kt: 'kotlin',\n    scala: 'scala',\n    sh: 'bash',\n    html: 'html',\n    css: 'css',\n    scss: 'scss',\n    sass: 'sass',\n    less: 'less',\n    md: 'markdown',\n    json: 'json',\n    yml: 'yaml',\n    yaml: 'yaml',\n    toml: 'toml',\n    sql: 'sql',\n    graphql: 'graphql',\n    xml: 'xml'\n  };\n  \n  return languageMap[extension] || '';\n} "],"mappings":"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","names":[]}