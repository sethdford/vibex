{"version":3,"sources":["../src/telemetry/index.ts","../node_modules/uuid/dist/esm-node/rng.js","../node_modules/uuid/dist/esm-node/stringify.js","../node_modules/uuid/dist/esm-node/native.js","../node_modules/uuid/dist/esm-node/v4.js"],"sourcesContent":["/**\n * Consolidated Telemetry System\n *\n * Combines a simple event tracking system with advanced, Sentry-like\n * error and performance monitoring capabilities. This system is designed to be\n * fully configurable, privacy-respecting, and disabled by default unless\n * explicitly opted in.\n */\n\nimport { EventEmitter } from 'events';\nimport { performance } from 'perf_hooks';\nimport os from 'os';\nimport { v4 as uuidv4 } from 'uuid';\nimport { logger } from '../utils/logger.js';\nimport { ErrorCategory } from '../errors/types.js';\n\n// ============================================================================\n// Enums and Types\n// ============================================================================\n\n/**\n * High-level telemetry event types for key actions.\n */\nexport enum TelemetryEventType {\n  CLI_START = 'cli_start',\n  CLI_EXIT = 'cli_exit',\n  COMMAND_EXECUTE = 'command_execute',\n  COMMAND_SUCCESS = 'command_success',\n  COMMAND_ERROR = 'command_error',\n  AI_REQUEST = 'ai_request',\n  AI_RESPONSE = 'ai_response',\n  AI_ERROR = 'ai_error',\n  AUTH_SUCCESS = 'auth_success',\n  AUTH_ERROR = 'auth_error',\n  CACHE_HIT = 'cache_hit',\n  CACHE_MISS = 'cache_miss'\n}\n\n/**\n * Consolidated telemetry configuration.\n */\nexport interface TelemetryConfig {\n  enabled: boolean;\n  dsn?: string; // Data Source Name for the telemetry backend\n  environment?: string;\n  release?: string;\n  clientId?: string;\n  user?: UserContext;\n  maxBreadcrumbs: number;\n  maxEvents: number;\n  flushInterval: number;\n  captureUnhandledRejections: boolean;\n  captureConsole: boolean;\n}\n\n// ... other interfaces from advanced-telemetry (TelemetryEvent, BreadcrumbEntry, etc.)\n// These interfaces are detailed and provide rich context.\n\ninterface TelemetryEvent {\n  event_id: string;\n  timestamp: number;\n  type: 'error' | 'message' | 'transaction';\n  level: 'info' | 'warning' | 'error';\n  message?: string;\n  exception?: NormalizedError;\n  breadcrumbs: BreadcrumbEntry[];\n  user?: UserContext;\n  tags?: Record<string, string>;\n  extra?: Record<string, any>;\n  environment?: string;\n  release?: string;\n  sdk?: {\n    name: string;\n    version: string;\n  };\n}\n\ninterface BreadcrumbEntry {\n  timestamp: number;\n  category: string;\n  message: string;\n  level: 'info' | 'warning' | 'error';\n  data?: Record<string, any>;\n}\n\ninterface SessionData {\n  id: string;\n  startTime: number;\n  endTime?: number;\n  duration: number;\n  status: 'active' | 'completed' | 'crashed' | 'abnormal';\n  events: number;\n  errors: number;\n  user?: UserContext;\n  environment?: string;\n}\n\ninterface MetricData {\n  name: string;\n  unit?: string;\n  value: number;\n  values: Array<{ value: number; timestamp: number }>;\n  tags: Record<string, string>;\n  aggregates: {\n    count: number;\n    sum: number;\n    min: number;\n    max: number;\n    avg: number;\n  };\n}\n\ninterface UserContext {\n  id?: string;\n  email?: string;\n  username?: string;\n  [key: string]: any;\n}\n\ninterface ErrorContext {\n  tags?: Record<string, string>;\n  extra?: Record<string, any>;\n}\n\ninterface NormalizedError {\n  type: string;\n  value: string;\n  stacktrace: string | StackFrame[];\n  mechanism: {\n    type: string;\n    handled: boolean;\n  };\n}\n\ninterface StackFrame {\n  function: string;\n  filename: string;\n  lineno: number;\n  colno: number;\n  in_app: boolean;\n}\n\n\n// ============================================================================\n// Telemetry Service\n// ============================================================================\n\n/**\n * The main telemetry service class.\n * Manages event collection, error capturing, metrics, and sessions.\n */\nexport class TelemetryService extends EventEmitter {\n  private config: TelemetryConfig;\n  private breadcrumbs: BreadcrumbEntry[] = [];\n  private events: TelemetryEvent[] = [];\n  private metrics: Map<string, MetricData> = new Map();\n  private sessions: Map<string, SessionData> = new Map();\n  private globalHandlersAttached = false;\n  private flushTimer?: NodeJS.Timeout;\n\n  constructor(config: Partial<TelemetryConfig> = {}) {\n    super();\n\n    // Default configuration, respects environment variables\n    const isEnabled = process.env.VIBEX_TELEMETRY !== 'false' && config.enabled !== false;\n\n    this.config = {\n      enabled: isEnabled,\n      environment: process.env.NODE_ENV || 'production',\n      maxBreadcrumbs: 100,\n      maxEvents: 1000,\n      flushInterval: 30000,\n      captureUnhandledRejections: true,\n      captureConsole: true,\n      ...config,\n    };\n\n    if (!this.config.clientId && isEnabled) {\n      this.config.clientId = uuidv4();\n    }\n    \n    if (this.config.enabled) {\n      this.initialize();\n    } else {\n      logger.debug('Telemetry service is disabled.');\n    }\n  }\n\n  private initialize(): void {\n    logger.debug('Telemetry service initializing...');\n    if (this.config.captureUnhandledRejections) {\n      this.attachGlobalHandlers();\n    }\n    if (this.config.captureConsole) {\n      this.instrumentConsole();\n    }\n    this.flushTimer = setInterval(() => this.flush(), this.config.flushInterval);\n    this.setupExitHandlers();\n    logger.debug('Telemetry service initialized.');\n    this.trackEvent(TelemetryEventType.CLI_START);\n  }\n\n  // --------------------------------------------------------------------------\n  // Public API - High-level Event Tracking\n  // --------------------------------------------------------------------------\n\n  /**\n   * Tracks a generic, high-level event.\n   */\n  trackEvent(type: TelemetryEventType, properties: Record<string, any> = {}): void {\n    if (!this.config.enabled) return;\n    \n    this.addBreadcrumb({\n        category: 'event',\n        message: type,\n        level: 'info',\n        data: properties\n    });\n\n    this.captureMessage(`${type}: ${JSON.stringify(properties)}`);\n  }\n\n  /**\n   * Tracks the execution of a command, sanitizing arguments.\n   */\n  trackCommand(commandName: string, args: Record<string, any> = {}, successful: boolean, duration?: number): void {\n    if (!this.config.enabled) return;\n    if (commandName === 'login' || commandName === 'logout') return;\n\n    const eventType = successful ? TelemetryEventType.COMMAND_SUCCESS : TelemetryEventType.COMMAND_ERROR;\n    this.trackEvent(eventType, {\n      command: commandName,\n      args: this.sanitizeArgs(args),\n      duration\n    });\n  }\n\n  /**\n   * A simplified method to track an error, which feeds into the advanced capture system.\n   */\n  trackError(error: unknown, context: Record<string, any> = {}): void {\n    if (!this.config.enabled) return;\n\n    const category = error instanceof Error && 'category' in error\n      ? (error as any).category\n      : ErrorCategory.UNKNOWN;\n\n    this.captureException(error, {\n      tags: { category, ...context.tags },\n      extra: context,\n    });\n  }\n\n  // --------------------------------------------------------------------------\n  // Public API - Advanced Capture & Metrics\n  // (from advanced-telemetry.ts)\n  // --------------------------------------------------------------------------\n\n  captureException(error: Error | unknown, context?: ErrorContext): string | undefined {\n    if (!this.config.enabled) return undefined;\n\n    const eventId = this.generateEventId();\n    const event: TelemetryEvent = {\n      event_id: eventId,\n      timestamp: Date.now(),\n      type: 'error',\n      level: 'error',\n      exception: this.normalizeError(error),\n      breadcrumbs: [...this.breadcrumbs],\n      user: this.config.user,\n      tags: context?.tags || {},\n      extra: context?.extra || {},\n      environment: this.config.environment,\n      release: this.config.release,\n      sdk: { name: 'vibex-telemetry', version: '3.0.0' }\n    };\n    \n    if (event.exception?.stacktrace) {\n        event.exception.stacktrace = this.processStackTrace(\n          typeof event.exception.stacktrace === 'string' \n            ? event.exception.stacktrace \n            : JSON.stringify(event.exception.stacktrace)\n        );\n    }\n\n    this.events.push(event);\n    this.emit('error:captured', event);\n\n    if (this.config.environment === 'development') {\n      logger.error('Captured exception:', { eventId, error: error instanceof Error ? error.message : String(error) });\n    }\n    return eventId;\n  }\n\n  captureMessage(message: string, level: 'info' | 'warning' | 'error' = 'info'): string | undefined {\n    if (!this.config.enabled) return undefined;\n\n    const eventId = this.generateEventId();\n    const event: TelemetryEvent = {\n      event_id: eventId,\n      timestamp: Date.now(),\n      type: 'message',\n      level,\n      message,\n      breadcrumbs: [...this.breadcrumbs],\n      user: this.config.user,\n      environment: this.config.environment,\n      release: this.config.release\n    };\n    this.events.push(event);\n    this.emit('message:captured', event);\n    return eventId;\n  }\n\n  addBreadcrumb(breadcrumb: Omit<BreadcrumbEntry, 'timestamp'>): void {\n    if (!this.config.enabled) return;\n\n    this.breadcrumbs.push({ ...breadcrumb, timestamp: Date.now() });\n    if (this.breadcrumbs.length > this.config.maxBreadcrumbs) {\n      this.breadcrumbs.shift();\n    }\n  }\n\n  trackMetric(name: string, value: number, unit?: string, tags?: Record<string, string>): void {\n    if (!this.config.enabled) return;\n\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, {\n        name, unit, value: 0, values: [], tags: tags || {},\n        aggregates: { count: 0, sum: 0, min: Infinity, max: -Infinity, avg: 0 }\n      });\n    }\n\n    const metric = this.metrics.get(name)!;\n    metric.value = value;\n    metric.values.push({ value, timestamp: Date.now() });\n    metric.aggregates.count++;\n    metric.aggregates.sum += value;\n    metric.aggregates.min = Math.min(metric.aggregates.min, value);\n    metric.aggregates.max = Math.max(metric.aggregates.max, value);\n    metric.aggregates.avg = metric.aggregates.sum / metric.aggregates.count;\n    this.emit('metric:tracked', { name, value, metric });\n  }\n\n  trackApiCall(endpoint: string, duration: number, status: number, model?: string): void {\n    if (!this.config.enabled) return;\n    this.trackMetric(`api.${endpoint}.duration`, duration, 'ms', { model: model || 'unknown' });\n    this.trackMetric(`api.${endpoint}.status.${status}`, 1, 'count');\n    this.addBreadcrumb({\n      category: 'api',\n      message: `API call to ${endpoint}`,\n      level: status >= 400 ? 'error' : 'info',\n      data: { endpoint, duration, status, model }\n    });\n  }\n\n  // ... (session methods: startSession, endSession, getActiveSessions)\n  startSession(sessionId?: string): SessionData | undefined {\n    if (!this.config.enabled) return undefined;\n    const id = sessionId || this.generateSessionId();\n    const session: SessionData = {\n      id,\n      startTime: Date.now(),\n      status: 'active',\n      events: 0,\n      errors: 0,\n      duration: 0,\n      user: this.config.user,\n      environment: this.config.environment\n    };\n    this.sessions.set(id, session);\n    this.emit('session:started', session);\n    return session;\n  }\n\n  endSession(sessionId: string, status: 'completed' | 'crashed' | 'abnormal' = 'completed'): void {\n    if (!this.config.enabled) return;\n    const session = this.sessions.get(sessionId);\n    if (!session) return;\n    session.endTime = Date.now();\n    session.duration = session.endTime - session.startTime;\n    session.status = status;\n    this.emit('session:ended', session);\n  }\n  \n  // --------------------------------------------------------------------------\n  // Internal Methods\n  // --------------------------------------------------------------------------\n\n  private sanitizeArgs(args: Record<string, any>): Record<string, any> {\n    const sanitizedArgs: Record<string, any> = {};\n    for (const [key, value] of Object.entries(args)) {\n      if (key.includes('key') || key.includes('token') || key.includes('password') || key.includes('secret')) {\n        continue;\n      }\n      if (typeof value === 'string') {\n        sanitizedArgs[key] = value.length > 100 ? `${value.substring(0, 100)}...` : value;\n      } else if (typeof value === 'number' || typeof value === 'boolean' || value === null || value === undefined) {\n        sanitizedArgs[key] = value;\n      } else if (Array.isArray(value)) {\n        sanitizedArgs[key] = `Array(${value.length})`;\n      } else if (typeof value === 'object') {\n        sanitizedArgs[key] = 'Object';\n      }\n    }\n    return sanitizedArgs;\n  }\n\n  private setupExitHandlers(): void {\n    const handleExit = (reason: string, exitCode: number) => {\n        this.trackEvent(TelemetryEventType.CLI_EXIT, { reason });\n        this.flushSync();\n        process.exit(exitCode);\n    };\n\n    process.on('exit', () => this.flushSync());\n    process.on('SIGINT', () => handleExit('SIGINT', 0));\n    process.on('SIGTERM', () => handleExit('SIGTERM', 0));\n  }\n\n  private instrumentConsole(): void {\n    const methods = ['log', 'info', 'warn', 'error', 'debug'] as const;\n    methods.forEach(method => {\n      const original = console[method];\n      console[method] = (...args: any[]) => {\n        this.addBreadcrumb({\n          category: 'console',\n          message: args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(' '),\n          level: method === 'error' ? 'error' : method === 'warn' ? 'warning' : 'info',\n          data: { method }\n        });\n        original.apply(console, args);\n      };\n    });\n  }\n\n  private attachGlobalHandlers(): void {\n    if (this.globalHandlersAttached) return;\n    process.on('unhandledRejection', (reason, promise) => {\n      this.captureException(reason, {\n        tags: { type: 'unhandledRejection' },\n        extra: { promise }\n      });\n    });\n    process.on('uncaughtException', (error) => {\n      this.captureException(error, {\n        tags: { type: 'uncaughtException' },\n        extra: { fatal: true }\n      });\n      this.flushSync();\n    });\n    this.globalHandlersAttached = true;\n  }\n\n  private normalizeError(error: unknown): NormalizedError {\n    if (error instanceof Error) {\n      return {\n        type: error.constructor.name,\n        value: error.message,\n        stacktrace: error.stack || '',\n        mechanism: { type: 'generic', handled: true }\n      };\n    }\n    return {\n      type: 'UnknownError',\n      value: String(error),\n      stacktrace: '',\n      mechanism: { type: 'generic', handled: true }\n    };\n  }\n  \n  private processStackTrace(stack: string): StackFrame[] {\n    // Basic stack trace processing\n    return stack.split('\\n').map(line => ({\n        function: 'unknown',\n        filename: line.trim(),\n        lineno: 0,\n        colno: 0,\n        in_app: !line.includes('node_modules')\n    })).slice(0, 50); // Limit frames\n  }\n\n  private generateEventId = () => uuidv4();\n  private generateSessionId = () => `session_${uuidv4()}`;\n\n  // --------------------------------------------------------------------------\n  // Flushing Logic\n  // --------------------------------------------------------------------------\n\n  async flush(): Promise<void> {\n    if (!this.config.enabled || this.events.length === 0) return;\n    const eventsToSend = [...this.events];\n    this.events = [];\n    \n    logger.debug(`Flushing ${eventsToSend.length} telemetry events.`);\n    try {\n      if (this.config.dsn) {\n        // In production, this would send to a telemetry backend like Sentry\n        // const response = await fetch(this.config.dsn, { ... });\n      }\n      this.emit('flush:success', { count: eventsToSend.length });\n    } catch (error) {\n      this.events.unshift(...eventsToSend); // Re-queue on failure\n      this.emit('flush:error', error);\n      logger.debug('Failed to flush telemetry events', error);\n    }\n  }\n\n  private flushSync(): void {\n    if (!this.config.enabled || this.events.length === 0) return;\n    logger.debug(`Would synchronously flush ${this.events.length} events on exit.`);\n    // In a real implementation, this would use a synchronous HTTP request library\n    this.events = [];\n  }\n  \n  // --------------------------------------------------------------------------\n  // Getters\n  // --------------------------------------------------------------------------\n  isEnabled = () => this.config.enabled;\n  getMetrics = () => Object.fromEntries(this.metrics);\n  getEvents = () => [...this.events];\n  getBreadcrumbs = () => [...this.breadcrumbs];\n}\n\n\n// ============================================================================\n// Singleton Instance\n// ============================================================================\n\n/**\n * The singleton telemetry instance for the application.\n * Import this to track events and errors.\n */\nexport const telemetry = new TelemetryService({\n    // Default configuration can be overridden by environment variables or a config file\n    release: process.env.npm_package_version || '0.0.0'\n}); ","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],"mappings":"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","names":["crypto","TelemetryEventType"]}