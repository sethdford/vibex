{"version":3,"sources":["../src/tools/screenshot.ts"],"sourcesContent":["/**\n * Screenshot Tool\n * \n * Provides functionality to capture terminal output and screen content\n * for feedback, debugging, and documentation purposes.\n */\n\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport { logger } from '../utils/logger.js';\nimport { createUserError } from '../errors/formatter.js';\nimport { ErrorCategory } from '../errors/types.js';\n\nconst execAsync = promisify(exec);\n\n/**\n * Screenshot options\n */\nexport interface ScreenshotOptions {\n  /**\n   * Output file path (optional, will generate one if not provided)\n   */\n  outputPath?: string;\n  \n  /**\n   * Screenshot type\n   */\n  type: 'terminal' | 'screen' | 'window';\n  \n  /**\n   * Quality (1-100, higher is better quality)\n   */\n  quality?: number;\n  \n  /**\n   * Include cursor in screenshot\n   */\n  includeCursor?: boolean;\n  \n  /**\n   * Delay before taking screenshot (in milliseconds)\n   */\n  delay?: number;\n}\n\n/**\n * Screenshot result\n */\nexport interface ScreenshotResult {\n  /**\n   * Path to the saved screenshot\n   */\n  filePath: string;\n  \n  /**\n   * File size in bytes\n   */\n  fileSize: number;\n  \n  /**\n   * Timestamp when screenshot was taken\n   */\n  timestamp: number;\n  \n  /**\n   * Screenshot dimensions\n   */\n  dimensions?: {\n    width: number;\n    height: number;\n  };\n}\n\n/**\n * Take a screenshot\n */\nexport async function takeScreenshot(options: ScreenshotOptions): Promise<ScreenshotResult> {\n  const platform = os.platform();\n  \n  // Generate output path if not provided\n  const outputPath = options.outputPath || generateScreenshotPath();\n  \n  // Ensure output directory exists\n  const outputDir = path.dirname(outputPath);\n  await fs.mkdir(outputDir, { recursive: true });\n  \n  try {\n    // Add delay if specified\n    if (options.delay && options.delay > 0) {\n      await new Promise(resolve => setTimeout(resolve, options.delay));\n    }\n    \n    let command: string;\n    \n    switch (platform) {\n      case 'darwin': // macOS\n        command = await buildMacOSCommand(options, outputPath);\n        break;\n      case 'linux':\n        command = await buildLinuxCommand(options, outputPath);\n        break;\n      case 'win32':\n        command = await buildWindowsCommand(options, outputPath);\n        break;\n      default:\n        throw createUserError(`Screenshot not supported on platform: ${platform}`, {\n          category: ErrorCategory.UNKNOWN,\n          resolution: 'Screenshots are supported on macOS, Linux, and Windows'\n        });\n    }\n    \n    logger.debug(`Executing screenshot command: ${command}`);\n    \n    // Execute the screenshot command\n    const { stdout, stderr } = await execAsync(command);\n    \n    if (stderr && !stderr.includes('Warning')) {\n      logger.warn(`Screenshot command stderr: ${stderr}`);\n    }\n    \n    // Verify the file was created\n    const stats = await fs.stat(outputPath);\n    \n    const result: ScreenshotResult = {\n      filePath: outputPath,\n      fileSize: stats.size,\n      timestamp: Date.now()\n    };\n    \n    // Try to get dimensions (if possible)\n    try {\n      const dimensions = await getImageDimensions(outputPath);\n      if (dimensions) {\n        result.dimensions = dimensions;\n      }\n    } catch (error) {\n      // Dimensions are optional, don't fail if we can't get them\n      logger.debug('Could not get image dimensions:', error);\n    }\n    \n    logger.info(`Screenshot saved: ${outputPath} (${stats.size} bytes)`);\n    return result;\n    \n  } catch (error) {\n    throw createUserError(`Failed to take screenshot: ${error instanceof Error ? error.message : String(error)}`, {\n      cause: error,\n      category: ErrorCategory.COMMAND_EXECUTION,\n      resolution: 'Check that screenshot tools are installed and permissions are correct'\n    });\n  }\n}\n\n/**\n * Build macOS screenshot command\n */\nasync function buildMacOSCommand(options: ScreenshotOptions, outputPath: string): Promise<string> {\n  const args: string[] = [];\n  \n  switch (options.type) {\n    case 'screen':\n      // Full screen\n      break;\n    case 'window':\n      args.push('-w'); // Interactive window selection\n      break;\n    case 'terminal':\n      // Try to capture the current terminal window\n      args.push('-w');\n      break;\n  }\n  \n  if (!options.includeCursor) {\n    args.push('-C'); // Don't include cursor\n  }\n  \n  if (options.delay && options.delay > 0) {\n    args.push('-T', String(options.delay / 1000)); // Convert to seconds\n  }\n  \n  args.push(outputPath);\n  \n  return `screencapture ${args.join(' ')}`;\n}\n\n/**\n * Build Linux screenshot command\n */\nasync function buildLinuxCommand(options: ScreenshotOptions, outputPath: string): Promise<string> {\n  // Try different screenshot tools in order of preference\n  const tools = ['gnome-screenshot', 'scrot', 'import'];\n  \n  for (const tool of tools) {\n    try {\n      await execAsync(`which ${tool}`);\n      return buildLinuxCommandForTool(tool, options, outputPath);\n    } catch {\n      // Tool not found, try next one\n    }\n  }\n  \n  throw createUserError('No screenshot tool found. Please install gnome-screenshot, scrot, or ImageMagick', {\n    category: ErrorCategory.COMMAND_NOT_FOUND,\n    resolution: 'Install a screenshot tool: sudo apt install gnome-screenshot'\n  });\n}\n\n/**\n * Build Linux command for specific tool\n */\nfunction buildLinuxCommandForTool(tool: string, options: ScreenshotOptions, outputPath: string): string {\n  switch (tool) {\n    case 'gnome-screenshot':\n      const gnomeArgs: string[] = ['-f', outputPath];\n      if (options.type === 'window') {\n        gnomeArgs.push('-w');\n      }\n      if (options.delay && options.delay > 0) {\n        gnomeArgs.push('-d', String(options.delay / 1000));\n      }\n      return `gnome-screenshot ${gnomeArgs.join(' ')}`;\n      \n    case 'scrot':\n      const scrotArgs: string[] = [outputPath];\n      if (options.type === 'window') {\n        scrotArgs.unshift('-s'); // Select window/area\n      }\n      if (options.delay && options.delay > 0) {\n        scrotArgs.unshift('-d', String(options.delay / 1000));\n      }\n      if (options.quality) {\n        scrotArgs.unshift('-q', String(options.quality));\n      }\n      return `scrot ${scrotArgs.join(' ')}`;\n      \n    case 'import':\n      const importArgs: string[] = [];\n      if (options.type === 'window') {\n        importArgs.push('-window', 'root'); // This will need refinement\n      } else {\n        importArgs.push('-window', 'root');\n      }\n      importArgs.push(outputPath);\n      return `import ${importArgs.join(' ')}`;\n      \n    default:\n      throw new Error(`Unsupported tool: ${tool}`);\n  }\n}\n\n/**\n * Build Windows screenshot command\n */\nasync function buildWindowsCommand(options: ScreenshotOptions, outputPath: string): Promise<string> {\n  // Use PowerShell for Windows screenshots\n  const script = `\n    Add-Type -AssemblyName System.Drawing\n    Add-Type -AssemblyName System.Windows.Forms\n    \n    $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds\n    $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height\n    $graphics = [System.Drawing.Graphics]::FromImage($bitmap)\n    $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)\n    $bitmap.Save('${outputPath.replace(/\\\\/g, '\\\\\\\\')}', [System.Drawing.Imaging.ImageFormat]::Png)\n    $graphics.Dispose()\n    $bitmap.Dispose()\n  `;\n  \n  return `powershell -Command \"${script.replace(/\\n\\s*/g, '; ')}\"`;\n}\n\n/**\n * Generate a unique screenshot file path\n */\nfunction generateScreenshotPath(): string {\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n  const filename = `screenshot-${timestamp}.png`;\n  \n  // Save to user's home directory or temp directory\n  const homeDir = os.homedir();\n  const screenshotDir = path.join(homeDir, '.claude-code', 'screenshots');\n  \n  return path.join(screenshotDir, filename);\n}\n\n/**\n * Get image dimensions (if possible)\n */\nasync function getImageDimensions(imagePath: string): Promise<{ width: number; height: number } | null> {\n  try {\n    // Try using ImageMagick's identify command\n    const { stdout } = await execAsync(`identify -format \"%wx%h\" \"${imagePath}\"`);\n    const match = stdout.trim().match(/^(\\d+)x(\\d+)$/);\n    if (match) {\n      return {\n        width: parseInt(match[1], 10),\n        height: parseInt(match[2], 10)\n      };\n    }\n  } catch {\n    // ImageMagick not available or failed\n  }\n  \n  try {\n    // Try using file command (less reliable but more widely available)\n    const { stdout } = await execAsync(`file \"${imagePath}\"`);\n    const match = stdout.match(/(\\d+)\\s*x\\s*(\\d+)/);\n    if (match) {\n      return {\n        width: parseInt(match[1], 10),\n        height: parseInt(match[2], 10)\n      };\n    }\n  } catch {\n    // file command failed\n  }\n  \n  return null;\n}\n\n/**\n * Capture terminal output as text\n */\nexport async function captureTerminalOutput(lines: number = 50): Promise<string> {\n  const platform = os.platform();\n  \n  try {\n    let command: string;\n    \n    switch (platform) {\n      case 'darwin':\n        // Use script command to capture terminal history\n        command = `script -q /dev/null history | tail -${lines}`;\n        break;\n      case 'linux':\n        // Use history command\n        command = `history ${lines}`;\n        break;\n      default:\n        // Fallback: capture recent commands from shell history\n        command = `tail -${lines} ~/.bash_history || tail -${lines} ~/.zsh_history || echo \"No shell history available\"`;\n    }\n    \n    const { stdout } = await execAsync(command);\n    return stdout;\n    \n  } catch (error) {\n    logger.warn('Could not capture terminal output:', error);\n    return 'Terminal output capture not available';\n  }\n}\n\n/**\n * Create screenshot tool definition for the tool registry\n */\nexport function createScreenshotTool() {\n  return {\n    name: 'take_screenshot',\n    description: 'Take a screenshot for feedback or documentation',\n    input_schema: {\n      type: 'object',\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['terminal', 'screen', 'window'],\n          description: 'Type of screenshot to take'\n        },\n        outputPath: {\n          type: 'string',\n          description: 'Path where to save the screenshot (optional)'\n        },\n        delay: {\n          type: 'number',\n          description: 'Delay in milliseconds before taking screenshot'\n        },\n        quality: {\n          type: 'number',\n          description: 'Image quality (1-100)'\n        }\n      },\n      required: ['type']\n    }\n  };\n}\n\n/**\n * Execute screenshot tool\n */\nexport async function executeScreenshot(input: any) {\n  try {\n    const options: ScreenshotOptions = {\n      type: input.type || 'screen',\n      outputPath: input.outputPath,\n      delay: input.delay || 0,\n      quality: input.quality || 85,\n      includeCursor: input.includeCursor !== false\n    };\n    \n    const result = await takeScreenshot(options);\n    \n    return {\n      success: true,\n      result: {\n        message: `Screenshot saved to ${result.filePath}`,\n        filePath: result.filePath,\n        fileSize: result.fileSize,\n        dimensions: result.dimensions\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : String(error)\n    };\n  }\n} "],"mappings":"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","names":[]}