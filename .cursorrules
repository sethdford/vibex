# VibeX Cursor Rules - Architectural Enforcement

## CRITICAL: Testing Framework Rules
- **NEVER use vitest imports** - We use Jest exclusively
- **ALWAYS import from Jest**: `import { describe, test, expect, beforeEach, afterEach, jest } from '@jest/globals'`
- **NEVER import from 'vitest'** - This causes build failures
- **Test file imports MUST use .ts/.tsx extensions** - Never import from .js files that don't exist
- **Jest mocks MUST be properly typed** - Use `jest.Mock<ReturnType, Args[]>` format

## Import Path Rules - ESM TypeScript Pattern
- **Source files**: Use .js extensions in imports (ESM TypeScript pattern)
- **Built files**: Reference .js files from dist/ directory
- **Test files**: Import from TypeScript source files (.ts/.tsx) using actual extensions
- **Demos**: Use `npx tsx` to run TypeScript directly with .tsx extensions
- **UNDERSTANDING**: VibeX uses ESM TypeScript pattern where source files are .ts/.tsx but imports use .js extensions for the compiled output

## TypeScript Configuration
- **Source code**: Must compile with zero TypeScript errors
- **Tests**: Excluded from main TypeScript compilation (tsconfig.json excludes tests/**/*) to prevent blocking builds
- **Build process**: Must complete under 50ms for startup performance

## Architecture Enforcement
- **Performance First**: <50ms startup, <40MB runtime, <5MB bundle
- **Type Safety**: Zero `any` types, no `@ts-ignore` suppressions
- **Modular Design**: Files <300 lines, functions <30 lines
- **Error Handling**: Custom UserError with category/resolution/details
- **No Console Pollution**: Use structured logger, never console.log

## Testing Standards
- **Framework**: Jest only (configured in jest.config.js)
- **Environment**: jsdom for React components
- **Coverage**: Minimum 10% global, aiming for 90%+
- **Mock Strategy**: Proper Jest mocks with explicit typing
- **Test Structure**: Describe/test blocks with clear naming

## File Organization
- **Source**: `src/**/*.ts` and `src/**/*.tsx`
- **Tests**: `tests/**/*.test.ts` and `tests/**/*.test.tsx` (excluded from main compilation)
- **Built**: `dist/**/*.js` (generated, never edit)
- **Demos**: Use tsx to run TypeScript directly

## Quality Gates
- **Pre-commit**: `npm run typecheck && npm run lint && npm run build`
- **TypeScript**: Zero errors in src/ directory
- **Linting**: Address critical errors, defer style issues
- **Build**: Must succeed and produce working CLI

## Current Status - Quality Metrics
- ✅ **TypeScript Errors**: 0 (down from 187)
- ✅ **Vitest Imports**: 0 (down from 3)
- ⚠️  **Large Files**: 118 files over 300 lines
- ⚠️  **Console Pollution**: 182 console statements
- ⚠️  **Import Pattern**: 202 files using ESM .js pattern (architectural decision needed)

## Import Patterns to USE
```typescript
// ✅ CURRENT ESM PATTERN - TypeScript with .js imports
import { Component } from './Component.js';
import { utils } from './utils.js';

// ✅ TEST PATTERN - Import from actual TypeScript files
import { Component } from './Component.tsx';
import { utils } from './utils.ts';

// ✅ DEMO PATTERN - Import from TypeScript source
import ComprehensiveDemo from './src/ui/demos/ComprehensiveDemo.tsx';
```

## Emergency Recovery Process
1. **TypeScript errors**: Exclude problematic directories from tsconfig.json
2. **Test failures**: Verify Jest configuration and import paths
3. **Build failures**: Check for mixed .js/.ts import issues
4. **Performance issues**: Profile startup time and memory usage

## Memory Creation Rules
- **Document architectural decisions** immediately when made
- **Record import patterns** and file organization rules
- **Track performance benchmarks** and quality gates
- **Note testing framework choices** and configuration
- **Remember critical debugging steps** for future issues

## Never Repeat These Mistakes
1. **Mixing testing frameworks** (vitest vs Jest)
2. **Including broken tests** in TypeScript compilation
3. **Untyped Jest mocks** causing compilation errors
4. **Ignoring quality gates** that prevent issues

## Success Metrics - Current Achievement
- **Zero TypeScript errors** in src/ directory
- **Sub-50ms build times** maintained
- **Working CLI commands** at all times
- **Functional demo scripts** with proper imports
- **Clean test separation** from main compilation

## Critical Naming Rules

### BANNED WORDS in Class/File/Function Names
- **"unified"** - Meaningless marketing term. Use specific action verbs instead:
  - ❌ UnifiedContextSystem → ✅ ContextSystem or MergedContextSystem
  - ❌ unified-ai-client.ts → ✅ ai-client.ts
  - ❌ UnifiedClaudeClient → ✅ ClaudeClient
- **"simple"** - Adds no technical value. Use descriptive names:
  - ❌ SimpleMemoryManager → ✅ MemoryManager
  - ❌ simple-auth.ts → ✅ auth.ts

### Naming Convention Enforcement
- Use specific, descriptive names that indicate actual functionality
- If combining multiple systems, use action verbs: Merged, Aggregated, Consolidated
- Avoid generic adjectives that provide no information 